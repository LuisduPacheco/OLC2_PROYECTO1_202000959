Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DECIMAL
    INT

Grammar

Rule 0     S' -> instructions
Rule 1     instructions -> instructions instruction
Rule 2     instructions -> instruction
Rule 3     instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
Rule 4     instruction -> VAR ID COLON type EQUAL expression SEMICOLON
Rule 5     type -> NUMBER
Rule 6     type -> FLOAT
Rule 7     type -> STRING
Rule 8     type -> BOOL
Rule 9     expressionList -> expressionList COMMA expression
Rule 10    expressionList -> expression
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> expression BY expression
Rule 14    expression -> expression DIVISION expression
Rule 15    expression -> L_PAR expression R_PAR
Rule 16    expression -> NUMBER
Rule 17    expression -> STRING
Rule 18    expression -> listArray
Rule 19    listArray -> listArray DOT ID
Rule 20    listArray -> listArray listAccessArray
Rule 21    listArray -> ID
Rule 22    listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET
Rule 23    listAccessArray -> L_BRACKET expression R_BRACKET

Terminals, with rules where they appear

BOOL                 : 8
BY                   : 13
COLON                : 4
COMMA                : 9
CONSOLE              : 3
DECIMAL              : 
DIVISION             : 14
DOT                  : 3 19
EQUAL                : 4
FLOAT                : 6
ID                   : 4 19 21
INT                  : 
LOG                  : 3
L_BRACKET            : 22 23
L_PAR                : 3 15
MINUS                : 12
NUMBER               : 5 16
PLUS                 : 11
R_BRACKET            : 22 23
R_PAR                : 3 15
SEMICOLON            : 3 4
STRING               : 7 17
VAR                  : 4
error                : 

Nonterminals, with rules where they appear

expression           : 4 9 10 11 11 12 12 13 13 14 14 15 22 23
expressionList       : 3 9
instruction          : 1 2
instructions         : 1 0
listAccessArray      : 20 22
listArray            : 18 19 20
type                 : 4

Parsing method: LALR

state 0

    (0) S' -> . instructions
    (1) instructions -> . instructions instruction
    (2) instructions -> . instruction
    (3) instruction -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (4) instruction -> . VAR ID COLON type EQUAL expression SEMICOLON

    CONSOLE         shift and go to state 3
    VAR             shift and go to state 4

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2

state 1

    (0) S' -> instructions .
    (1) instructions -> instructions . instruction
    (3) instruction -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (4) instruction -> . VAR ID COLON type EQUAL expression SEMICOLON

    CONSOLE         shift and go to state 3
    VAR             shift and go to state 4

    instruction                    shift and go to state 5

state 2

    (2) instructions -> instruction .

    CONSOLE         reduce using rule 2 (instructions -> instruction .)
    VAR             reduce using rule 2 (instructions -> instruction .)
    $end            reduce using rule 2 (instructions -> instruction .)


state 3

    (3) instruction -> CONSOLE . DOT LOG L_PAR expressionList R_PAR SEMICOLON

    DOT             shift and go to state 6


state 4

    (4) instruction -> VAR . ID COLON type EQUAL expression SEMICOLON

    ID              shift and go to state 7


state 5

    (1) instructions -> instructions instruction .

    CONSOLE         reduce using rule 1 (instructions -> instructions instruction .)
    VAR             reduce using rule 1 (instructions -> instructions instruction .)
    $end            reduce using rule 1 (instructions -> instructions instruction .)


state 6

    (3) instruction -> CONSOLE DOT . LOG L_PAR expressionList R_PAR SEMICOLON

    LOG             shift and go to state 8


state 7

    (4) instruction -> VAR ID . COLON type EQUAL expression SEMICOLON

    COLON           shift and go to state 9


state 8

    (3) instruction -> CONSOLE DOT LOG . L_PAR expressionList R_PAR SEMICOLON

    L_PAR           shift and go to state 10


state 9

    (4) instruction -> VAR ID COLON . type EQUAL expression SEMICOLON
    (5) type -> . NUMBER
    (6) type -> . FLOAT
    (7) type -> . STRING
    (8) type -> . BOOL

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15

    type                           shift and go to state 11

state 10

    (3) instruction -> CONSOLE DOT LOG L_PAR . expressionList R_PAR SEMICOLON
    (9) expressionList -> . expressionList COMMA expression
    (10) expressionList -> . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expressionList                 shift and go to state 17
    expression                     shift and go to state 18
    listArray                      shift and go to state 21

state 11

    (4) instruction -> VAR ID COLON type . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 23


state 12

    (5) type -> NUMBER .

    EQUAL           reduce using rule 5 (type -> NUMBER .)


state 13

    (6) type -> FLOAT .

    EQUAL           reduce using rule 6 (type -> FLOAT .)


state 14

    (7) type -> STRING .

    EQUAL           reduce using rule 7 (type -> STRING .)


state 15

    (8) type -> BOOL .

    EQUAL           reduce using rule 8 (type -> BOOL .)


state 16

    (15) expression -> L_PAR . expression R_PAR
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 24
    listArray                      shift and go to state 21

state 17

    (3) instruction -> CONSOLE DOT LOG L_PAR expressionList . R_PAR SEMICOLON
    (9) expressionList -> expressionList . COMMA expression

    R_PAR           shift and go to state 25
    COMMA           shift and go to state 26


state 18

    (10) expressionList -> expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    R_PAR           reduce using rule 10 (expressionList -> expression .)
    COMMA           reduce using rule 10 (expressionList -> expression .)
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 19

    (16) expression -> NUMBER .

    PLUS            reduce using rule 16 (expression -> NUMBER .)
    MINUS           reduce using rule 16 (expression -> NUMBER .)
    BY              reduce using rule 16 (expression -> NUMBER .)
    DIVISION        reduce using rule 16 (expression -> NUMBER .)
    R_PAR           reduce using rule 16 (expression -> NUMBER .)
    COMMA           reduce using rule 16 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 16 (expression -> NUMBER .)
    R_BRACKET       reduce using rule 16 (expression -> NUMBER .)


state 20

    (17) expression -> STRING .

    PLUS            reduce using rule 17 (expression -> STRING .)
    MINUS           reduce using rule 17 (expression -> STRING .)
    BY              reduce using rule 17 (expression -> STRING .)
    DIVISION        reduce using rule 17 (expression -> STRING .)
    R_PAR           reduce using rule 17 (expression -> STRING .)
    COMMA           reduce using rule 17 (expression -> STRING .)
    SEMICOLON       reduce using rule 17 (expression -> STRING .)
    R_BRACKET       reduce using rule 17 (expression -> STRING .)


state 21

    (18) expression -> listArray .
    (19) listArray -> listArray . DOT ID
    (20) listArray -> listArray . listAccessArray
    (22) listAccessArray -> . listAccessArray L_BRACKET expression R_BRACKET
    (23) listAccessArray -> . L_BRACKET expression R_BRACKET

    PLUS            reduce using rule 18 (expression -> listArray .)
    MINUS           reduce using rule 18 (expression -> listArray .)
    BY              reduce using rule 18 (expression -> listArray .)
    DIVISION        reduce using rule 18 (expression -> listArray .)
    R_PAR           reduce using rule 18 (expression -> listArray .)
    COMMA           reduce using rule 18 (expression -> listArray .)
    SEMICOLON       reduce using rule 18 (expression -> listArray .)
    R_BRACKET       reduce using rule 18 (expression -> listArray .)
    DOT             shift and go to state 31
    L_BRACKET       shift and go to state 33

    listAccessArray                shift and go to state 32

state 22

    (21) listArray -> ID .

    DOT             reduce using rule 21 (listArray -> ID .)
    L_BRACKET       reduce using rule 21 (listArray -> ID .)
    PLUS            reduce using rule 21 (listArray -> ID .)
    MINUS           reduce using rule 21 (listArray -> ID .)
    BY              reduce using rule 21 (listArray -> ID .)
    DIVISION        reduce using rule 21 (listArray -> ID .)
    R_PAR           reduce using rule 21 (listArray -> ID .)
    COMMA           reduce using rule 21 (listArray -> ID .)
    SEMICOLON       reduce using rule 21 (listArray -> ID .)
    R_BRACKET       reduce using rule 21 (listArray -> ID .)


state 23

    (4) instruction -> VAR ID COLON type EQUAL . expression SEMICOLON
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 34
    listArray                      shift and go to state 21

state 24

    (15) expression -> L_PAR expression . R_PAR
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    R_PAR           shift and go to state 35
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 25

    (3) instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 36


state 26

    (9) expressionList -> expressionList COMMA . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 37
    listArray                      shift and go to state 21

state 27

    (11) expression -> expression PLUS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 38
    listArray                      shift and go to state 21

state 28

    (12) expression -> expression MINUS . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 39
    listArray                      shift and go to state 21

state 29

    (13) expression -> expression BY . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 40
    listArray                      shift and go to state 21

state 30

    (14) expression -> expression DIVISION . expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 41
    listArray                      shift and go to state 21

state 31

    (19) listArray -> listArray DOT . ID

    ID              shift and go to state 42


state 32

    (20) listArray -> listArray listAccessArray .
    (22) listAccessArray -> listAccessArray . L_BRACKET expression R_BRACKET

  ! shift/reduce conflict for L_BRACKET resolved as shift
    DOT             reduce using rule 20 (listArray -> listArray listAccessArray .)
    PLUS            reduce using rule 20 (listArray -> listArray listAccessArray .)
    MINUS           reduce using rule 20 (listArray -> listArray listAccessArray .)
    BY              reduce using rule 20 (listArray -> listArray listAccessArray .)
    DIVISION        reduce using rule 20 (listArray -> listArray listAccessArray .)
    R_PAR           reduce using rule 20 (listArray -> listArray listAccessArray .)
    COMMA           reduce using rule 20 (listArray -> listArray listAccessArray .)
    SEMICOLON       reduce using rule 20 (listArray -> listArray listAccessArray .)
    R_BRACKET       reduce using rule 20 (listArray -> listArray listAccessArray .)
    L_BRACKET       shift and go to state 43

  ! L_BRACKET       [ reduce using rule 20 (listArray -> listArray listAccessArray .) ]


state 33

    (23) listAccessArray -> L_BRACKET . expression R_BRACKET
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 44
    listArray                      shift and go to state 21

state 34

    (4) instruction -> VAR ID COLON type EQUAL expression . SEMICOLON
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 45
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 35

    (15) expression -> L_PAR expression R_PAR .

    PLUS            reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    MINUS           reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    BY              reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    DIVISION        reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    R_PAR           reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    COMMA           reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    SEMICOLON       reduce using rule 15 (expression -> L_PAR expression R_PAR .)
    R_BRACKET       reduce using rule 15 (expression -> L_PAR expression R_PAR .)


state 36

    (3) instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .

    CONSOLE         reduce using rule 3 (instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    VAR             reduce using rule 3 (instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    $end            reduce using rule 3 (instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)


state 37

    (9) expressionList -> expressionList COMMA expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    R_PAR           reduce using rule 9 (expressionList -> expressionList COMMA expression .)
    COMMA           reduce using rule 9 (expressionList -> expressionList COMMA expression .)
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 38

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    R_PAR           reduce using rule 11 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 11 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 11 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 11 (expression -> expression PLUS expression .)
    BY              shift and go to state 29
    DIVISION        shift and go to state 30

  ! BY              [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 39

    (12) expression -> expression MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    PLUS            reduce using rule 12 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 12 (expression -> expression MINUS expression .)
    R_PAR           reduce using rule 12 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 12 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 12 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 12 (expression -> expression MINUS expression .)
    BY              shift and go to state 29
    DIVISION        shift and go to state 30

  ! BY              [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 40

    (13) expression -> expression BY expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    PLUS            reduce using rule 13 (expression -> expression BY expression .)
    MINUS           reduce using rule 13 (expression -> expression BY expression .)
    BY              reduce using rule 13 (expression -> expression BY expression .)
    DIVISION        reduce using rule 13 (expression -> expression BY expression .)
    R_PAR           reduce using rule 13 (expression -> expression BY expression .)
    COMMA           reduce using rule 13 (expression -> expression BY expression .)
    SEMICOLON       reduce using rule 13 (expression -> expression BY expression .)
    R_BRACKET       reduce using rule 13 (expression -> expression BY expression .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! BY              [ shift and go to state 29 ]
  ! DIVISION        [ shift and go to state 30 ]


state 41

    (14) expression -> expression DIVISION expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    PLUS            reduce using rule 14 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 14 (expression -> expression DIVISION expression .)
    BY              reduce using rule 14 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 14 (expression -> expression DIVISION expression .)
    R_PAR           reduce using rule 14 (expression -> expression DIVISION expression .)
    COMMA           reduce using rule 14 (expression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 14 (expression -> expression DIVISION expression .)
    R_BRACKET       reduce using rule 14 (expression -> expression DIVISION expression .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! BY              [ shift and go to state 29 ]
  ! DIVISION        [ shift and go to state 30 ]


state 42

    (19) listArray -> listArray DOT ID .

    DOT             reduce using rule 19 (listArray -> listArray DOT ID .)
    L_BRACKET       reduce using rule 19 (listArray -> listArray DOT ID .)
    PLUS            reduce using rule 19 (listArray -> listArray DOT ID .)
    MINUS           reduce using rule 19 (listArray -> listArray DOT ID .)
    BY              reduce using rule 19 (listArray -> listArray DOT ID .)
    DIVISION        reduce using rule 19 (listArray -> listArray DOT ID .)
    R_PAR           reduce using rule 19 (listArray -> listArray DOT ID .)
    COMMA           reduce using rule 19 (listArray -> listArray DOT ID .)
    SEMICOLON       reduce using rule 19 (listArray -> listArray DOT ID .)
    R_BRACKET       reduce using rule 19 (listArray -> listArray DOT ID .)


state 43

    (22) listAccessArray -> listAccessArray L_BRACKET . expression R_BRACKET
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression BY expression
    (14) expression -> . expression DIVISION expression
    (15) expression -> . L_PAR expression R_PAR
    (16) expression -> . NUMBER
    (17) expression -> . STRING
    (18) expression -> . listArray
    (19) listArray -> . listArray DOT ID
    (20) listArray -> . listArray listAccessArray
    (21) listArray -> . ID

    L_PAR           shift and go to state 16
    NUMBER          shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 22

    expression                     shift and go to state 46
    listArray                      shift and go to state 21

state 44

    (23) listAccessArray -> L_BRACKET expression . R_BRACKET
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    R_BRACKET       shift and go to state 47
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 45

    (4) instruction -> VAR ID COLON type EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 4 (instruction -> VAR ID COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 4 (instruction -> VAR ID COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 4 (instruction -> VAR ID COLON type EQUAL expression SEMICOLON .)


state 46

    (22) listAccessArray -> listAccessArray L_BRACKET expression . R_BRACKET
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . BY expression
    (14) expression -> expression . DIVISION expression

    R_BRACKET       shift and go to state 48
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    BY              shift and go to state 29
    DIVISION        shift and go to state 30


state 47

    (23) listAccessArray -> L_BRACKET expression R_BRACKET .

    L_BRACKET       reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    DOT             reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    BY              reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    DIVISION        reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    R_PAR           reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 23 (listAccessArray -> L_BRACKET expression R_BRACKET .)


state 48

    (22) listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .

    L_BRACKET       reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    DOT             reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    BY              reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    DIVISION        reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    R_PAR           reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 22 (listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_BRACKET in state 32 resolved as shift
