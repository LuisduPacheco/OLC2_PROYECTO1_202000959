Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    DECIMAL
    INT
    RETURN
    WHILE

Grammar

Rule 0     S' -> s
Rule 1     s -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> print
Rule 5     instruction -> if_instruction
Rule 6     instruction -> declaration
Rule 7     instruction -> assignment
Rule 8     print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
Rule 9     if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY
Rule 10    if_instruction -> if_instruction else_if_instruction
Rule 11    else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY
Rule 12    declaration -> VAR ID COLON type EQUAL expression SEMICOLON
Rule 13    declaration -> VAR ID EQUAL expression SEMICOLON
Rule 14    declaration -> VAR ID COLON type SEMICOLON
Rule 15    declaration -> CONST ID COLON type EQUAL expression SEMICOLON
Rule 16    declaration -> CONST ID EQUAL expression SEMICOLON
Rule 17    assignment -> ID EQUAL expression SEMICOLON
Rule 18    assignment -> ID ADD_ASSIGN expression SEMICOLON
Rule 19    assignment -> ID SUB_ASSIGN expression SEMICOLON
Rule 20    type -> NUMBER
Rule 21    type -> FLOAT
Rule 22    type -> STRING
Rule 23    type -> BOOLEAN
Rule 24    type -> CHAR
Rule 25    expressionList -> expressionList COMMA expression
Rule 26    expressionList -> expression
Rule 27    expression -> expression PLUS expression
Rule 28    expression -> expression MINUS expression
Rule 29    expression -> expression BY expression
Rule 30    expression -> expression DIVISION expression
Rule 31    expression -> expression MODULO expression
Rule 32    expression -> expression EQEQUAL expression
Rule 33    expression -> expression DIF expression
Rule 34    expression -> expression GREATER expression
Rule 35    expression -> expression GREATER_E expression
Rule 36    expression -> expression LESS expression
Rule 37    expression -> expression LESS_E expression
Rule 38    expression -> expression AND expression
Rule 39    expression -> expression OR expression
Rule 40    expression -> NEGATE expression
Rule 41    expression -> L_PAR expression R_PAR
Rule 42    expression -> NUMBER
Rule 43    expression -> STRING
Rule 44    expression -> FLOAT
Rule 45    expression -> CHAR
Rule 46    expression -> BOOLEAN
Rule 47    expression -> listArray
Rule 48    expression -> L_BRACKET expressionList R_BRACKET
Rule 49    listArray -> listArray L_BRACKET expression R_BRACKET
Rule 50    listArray -> listArray DOT ID
Rule 51    listArray -> ID

Terminals, with rules where they appear

ADD_ASSIGN           : 18
AND                  : 38
BOOLEAN              : 23 46
BREAK                : 
BY                   : 29
CHAR                 : 24 45
COLON                : 12 14 15
COMMA                : 25
CONSOLE              : 8
CONST                : 15 16
CONTINUE             : 
DECIMAL              : 
DIF                  : 33
DIVISION             : 30
DOT                  : 8 50
ELSE                 : 11
EQEQUAL              : 32
EQUAL                : 12 13 15 16 17
FLOAT                : 21 44
GREATER              : 34
GREATER_E            : 35
ID                   : 12 13 14 15 16 17 18 19 50 51
IF                   : 9 11
INT                  : 
LESS                 : 36
LESS_E               : 37
LOG                  : 8
L_BRACKET            : 48 49
L_KEY                : 9 11
L_PAR                : 8 9 11 41
MINUS                : 28
MODULO               : 31
NEGATE               : 40
NUMBER               : 20 42
OR                   : 39
PLUS                 : 27
RETURN               : 
R_BRACKET            : 48 49
R_KEY                : 9 11
R_PAR                : 8 9 11 41
SEMICOLON            : 8 12 13 14 15 16 17 18 19
STRING               : 22 43
SUB_ASSIGN           : 19
VAR                  : 12 13 14
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 7
block                : 1 2 9 11
declaration          : 6
else_if_instruction  : 10
expression           : 9 11 12 13 15 16 17 18 19 25 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 49
expressionList       : 8 25 48
if_instruction       : 5 10
instruction          : 2 3
listArray            : 47 49 50
print                : 4
s                    : 0
type                 : 12 14 15

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    s                              shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 1

    (0) S' -> s .



state 2

    (1) s -> block .
    (2) block -> block . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    $end            reduce using rule 1 (s -> block .)
    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    instruction                    shift and go to state 13
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 3

    (3) block -> instruction .

    CONSOLE         reduce using rule 3 (block -> instruction .)
    IF              reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    CONST           reduce using rule 3 (block -> instruction .)
    ID              reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)
    R_KEY           reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> print .

    CONSOLE         reduce using rule 4 (instruction -> print .)
    IF              reduce using rule 4 (instruction -> print .)
    VAR             reduce using rule 4 (instruction -> print .)
    CONST           reduce using rule 4 (instruction -> print .)
    ID              reduce using rule 4 (instruction -> print .)
    $end            reduce using rule 4 (instruction -> print .)
    R_KEY           reduce using rule 4 (instruction -> print .)


state 5

    (5) instruction -> if_instruction .
    (10) if_instruction -> if_instruction . else_if_instruction
    (11) else_if_instruction -> . ELSE IF L_PAR expression R_PAR L_KEY block R_KEY

    CONSOLE         reduce using rule 5 (instruction -> if_instruction .)
    IF              reduce using rule 5 (instruction -> if_instruction .)
    VAR             reduce using rule 5 (instruction -> if_instruction .)
    CONST           reduce using rule 5 (instruction -> if_instruction .)
    ID              reduce using rule 5 (instruction -> if_instruction .)
    $end            reduce using rule 5 (instruction -> if_instruction .)
    R_KEY           reduce using rule 5 (instruction -> if_instruction .)
    ELSE            shift and go to state 15

    else_if_instruction            shift and go to state 14

state 6

    (6) instruction -> declaration .

    CONSOLE         reduce using rule 6 (instruction -> declaration .)
    IF              reduce using rule 6 (instruction -> declaration .)
    VAR             reduce using rule 6 (instruction -> declaration .)
    CONST           reduce using rule 6 (instruction -> declaration .)
    ID              reduce using rule 6 (instruction -> declaration .)
    $end            reduce using rule 6 (instruction -> declaration .)
    R_KEY           reduce using rule 6 (instruction -> declaration .)


state 7

    (7) instruction -> assignment .

    CONSOLE         reduce using rule 7 (instruction -> assignment .)
    IF              reduce using rule 7 (instruction -> assignment .)
    VAR             reduce using rule 7 (instruction -> assignment .)
    CONST           reduce using rule 7 (instruction -> assignment .)
    ID              reduce using rule 7 (instruction -> assignment .)
    $end            reduce using rule 7 (instruction -> assignment .)
    R_KEY           reduce using rule 7 (instruction -> assignment .)


state 8

    (8) print -> CONSOLE . DOT LOG L_PAR expressionList R_PAR SEMICOLON

    DOT             shift and go to state 16


state 9

    (9) if_instruction -> IF . L_PAR expression R_PAR L_KEY block R_KEY

    L_PAR           shift and go to state 17


state 10

    (12) declaration -> VAR . ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> VAR . ID EQUAL expression SEMICOLON
    (14) declaration -> VAR . ID COLON type SEMICOLON

    ID              shift and go to state 18


state 11

    (17) assignment -> ID . EQUAL expression SEMICOLON
    (18) assignment -> ID . ADD_ASSIGN expression SEMICOLON
    (19) assignment -> ID . SUB_ASSIGN expression SEMICOLON

    EQUAL           shift and go to state 19
    ADD_ASSIGN      shift and go to state 20
    SUB_ASSIGN      shift and go to state 21


state 12

    (15) declaration -> CONST . ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> CONST . ID EQUAL expression SEMICOLON

    ID              shift and go to state 22


state 13

    (2) block -> block instruction .

    CONSOLE         reduce using rule 2 (block -> block instruction .)
    IF              reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    CONST           reduce using rule 2 (block -> block instruction .)
    ID              reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)
    R_KEY           reduce using rule 2 (block -> block instruction .)


state 14

    (10) if_instruction -> if_instruction else_if_instruction .

    ELSE            reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    CONSOLE         reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    IF              reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    VAR             reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    CONST           reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    ID              reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    $end            reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)
    R_KEY           reduce using rule 10 (if_instruction -> if_instruction else_if_instruction .)


state 15

    (11) else_if_instruction -> ELSE . IF L_PAR expression R_PAR L_KEY block R_KEY

    IF              shift and go to state 23


state 16

    (8) print -> CONSOLE DOT . LOG L_PAR expressionList R_PAR SEMICOLON

    LOG             shift and go to state 24


state 17

    (9) if_instruction -> IF L_PAR . expression R_PAR L_KEY block R_KEY
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 26
    listArray                      shift and go to state 33

state 18

    (12) declaration -> VAR ID . COLON type EQUAL expression SEMICOLON
    (13) declaration -> VAR ID . EQUAL expression SEMICOLON
    (14) declaration -> VAR ID . COLON type SEMICOLON

    COLON           shift and go to state 36
    EQUAL           shift and go to state 37


state 19

    (17) assignment -> ID EQUAL . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 38
    listArray                      shift and go to state 33

state 20

    (18) assignment -> ID ADD_ASSIGN . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 39
    listArray                      shift and go to state 33

state 21

    (19) assignment -> ID SUB_ASSIGN . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 40
    listArray                      shift and go to state 33

state 22

    (15) declaration -> CONST ID . COLON type EQUAL expression SEMICOLON
    (16) declaration -> CONST ID . EQUAL expression SEMICOLON

    COLON           shift and go to state 41
    EQUAL           shift and go to state 42


state 23

    (11) else_if_instruction -> ELSE IF . L_PAR expression R_PAR L_KEY block R_KEY

    L_PAR           shift and go to state 43


state 24

    (8) print -> CONSOLE DOT LOG . L_PAR expressionList R_PAR SEMICOLON

    L_PAR           shift and go to state 44


state 25

    (41) expression -> L_PAR . expression R_PAR
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 45
    listArray                      shift and go to state 33

state 26

    (9) if_instruction -> IF L_PAR expression . R_PAR L_KEY block R_KEY
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 27

    (40) expression -> NEGATE . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 60
    listArray                      shift and go to state 33

state 28

    (42) expression -> NUMBER .

    R_PAR           reduce using rule 42 (expression -> NUMBER .)
    PLUS            reduce using rule 42 (expression -> NUMBER .)
    MINUS           reduce using rule 42 (expression -> NUMBER .)
    BY              reduce using rule 42 (expression -> NUMBER .)
    DIVISION        reduce using rule 42 (expression -> NUMBER .)
    MODULO          reduce using rule 42 (expression -> NUMBER .)
    EQEQUAL         reduce using rule 42 (expression -> NUMBER .)
    DIF             reduce using rule 42 (expression -> NUMBER .)
    GREATER         reduce using rule 42 (expression -> NUMBER .)
    GREATER_E       reduce using rule 42 (expression -> NUMBER .)
    LESS            reduce using rule 42 (expression -> NUMBER .)
    LESS_E          reduce using rule 42 (expression -> NUMBER .)
    AND             reduce using rule 42 (expression -> NUMBER .)
    OR              reduce using rule 42 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 42 (expression -> NUMBER .)
    R_BRACKET       reduce using rule 42 (expression -> NUMBER .)
    COMMA           reduce using rule 42 (expression -> NUMBER .)


state 29

    (43) expression -> STRING .

    R_PAR           reduce using rule 43 (expression -> STRING .)
    PLUS            reduce using rule 43 (expression -> STRING .)
    MINUS           reduce using rule 43 (expression -> STRING .)
    BY              reduce using rule 43 (expression -> STRING .)
    DIVISION        reduce using rule 43 (expression -> STRING .)
    MODULO          reduce using rule 43 (expression -> STRING .)
    EQEQUAL         reduce using rule 43 (expression -> STRING .)
    DIF             reduce using rule 43 (expression -> STRING .)
    GREATER         reduce using rule 43 (expression -> STRING .)
    GREATER_E       reduce using rule 43 (expression -> STRING .)
    LESS            reduce using rule 43 (expression -> STRING .)
    LESS_E          reduce using rule 43 (expression -> STRING .)
    AND             reduce using rule 43 (expression -> STRING .)
    OR              reduce using rule 43 (expression -> STRING .)
    SEMICOLON       reduce using rule 43 (expression -> STRING .)
    R_BRACKET       reduce using rule 43 (expression -> STRING .)
    COMMA           reduce using rule 43 (expression -> STRING .)


state 30

    (44) expression -> FLOAT .

    R_PAR           reduce using rule 44 (expression -> FLOAT .)
    PLUS            reduce using rule 44 (expression -> FLOAT .)
    MINUS           reduce using rule 44 (expression -> FLOAT .)
    BY              reduce using rule 44 (expression -> FLOAT .)
    DIVISION        reduce using rule 44 (expression -> FLOAT .)
    MODULO          reduce using rule 44 (expression -> FLOAT .)
    EQEQUAL         reduce using rule 44 (expression -> FLOAT .)
    DIF             reduce using rule 44 (expression -> FLOAT .)
    GREATER         reduce using rule 44 (expression -> FLOAT .)
    GREATER_E       reduce using rule 44 (expression -> FLOAT .)
    LESS            reduce using rule 44 (expression -> FLOAT .)
    LESS_E          reduce using rule 44 (expression -> FLOAT .)
    AND             reduce using rule 44 (expression -> FLOAT .)
    OR              reduce using rule 44 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 44 (expression -> FLOAT .)
    R_BRACKET       reduce using rule 44 (expression -> FLOAT .)
    COMMA           reduce using rule 44 (expression -> FLOAT .)


state 31

    (45) expression -> CHAR .

    R_PAR           reduce using rule 45 (expression -> CHAR .)
    PLUS            reduce using rule 45 (expression -> CHAR .)
    MINUS           reduce using rule 45 (expression -> CHAR .)
    BY              reduce using rule 45 (expression -> CHAR .)
    DIVISION        reduce using rule 45 (expression -> CHAR .)
    MODULO          reduce using rule 45 (expression -> CHAR .)
    EQEQUAL         reduce using rule 45 (expression -> CHAR .)
    DIF             reduce using rule 45 (expression -> CHAR .)
    GREATER         reduce using rule 45 (expression -> CHAR .)
    GREATER_E       reduce using rule 45 (expression -> CHAR .)
    LESS            reduce using rule 45 (expression -> CHAR .)
    LESS_E          reduce using rule 45 (expression -> CHAR .)
    AND             reduce using rule 45 (expression -> CHAR .)
    OR              reduce using rule 45 (expression -> CHAR .)
    SEMICOLON       reduce using rule 45 (expression -> CHAR .)
    R_BRACKET       reduce using rule 45 (expression -> CHAR .)
    COMMA           reduce using rule 45 (expression -> CHAR .)


state 32

    (46) expression -> BOOLEAN .

    R_PAR           reduce using rule 46 (expression -> BOOLEAN .)
    PLUS            reduce using rule 46 (expression -> BOOLEAN .)
    MINUS           reduce using rule 46 (expression -> BOOLEAN .)
    BY              reduce using rule 46 (expression -> BOOLEAN .)
    DIVISION        reduce using rule 46 (expression -> BOOLEAN .)
    MODULO          reduce using rule 46 (expression -> BOOLEAN .)
    EQEQUAL         reduce using rule 46 (expression -> BOOLEAN .)
    DIF             reduce using rule 46 (expression -> BOOLEAN .)
    GREATER         reduce using rule 46 (expression -> BOOLEAN .)
    GREATER_E       reduce using rule 46 (expression -> BOOLEAN .)
    LESS            reduce using rule 46 (expression -> BOOLEAN .)
    LESS_E          reduce using rule 46 (expression -> BOOLEAN .)
    AND             reduce using rule 46 (expression -> BOOLEAN .)
    OR              reduce using rule 46 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 46 (expression -> BOOLEAN .)
    R_BRACKET       reduce using rule 46 (expression -> BOOLEAN .)
    COMMA           reduce using rule 46 (expression -> BOOLEAN .)


state 33

    (47) expression -> listArray .
    (49) listArray -> listArray . L_BRACKET expression R_BRACKET
    (50) listArray -> listArray . DOT ID

    R_PAR           reduce using rule 47 (expression -> listArray .)
    PLUS            reduce using rule 47 (expression -> listArray .)
    MINUS           reduce using rule 47 (expression -> listArray .)
    BY              reduce using rule 47 (expression -> listArray .)
    DIVISION        reduce using rule 47 (expression -> listArray .)
    MODULO          reduce using rule 47 (expression -> listArray .)
    EQEQUAL         reduce using rule 47 (expression -> listArray .)
    DIF             reduce using rule 47 (expression -> listArray .)
    GREATER         reduce using rule 47 (expression -> listArray .)
    GREATER_E       reduce using rule 47 (expression -> listArray .)
    LESS            reduce using rule 47 (expression -> listArray .)
    LESS_E          reduce using rule 47 (expression -> listArray .)
    AND             reduce using rule 47 (expression -> listArray .)
    OR              reduce using rule 47 (expression -> listArray .)
    SEMICOLON       reduce using rule 47 (expression -> listArray .)
    R_BRACKET       reduce using rule 47 (expression -> listArray .)
    COMMA           reduce using rule 47 (expression -> listArray .)
    L_BRACKET       shift and go to state 61
    DOT             shift and go to state 62


state 34

    (48) expression -> L_BRACKET . expressionList R_BRACKET
    (25) expressionList -> . expressionList COMMA expression
    (26) expressionList -> . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expressionList                 shift and go to state 63
    expression                     shift and go to state 64
    listArray                      shift and go to state 33

state 35

    (51) listArray -> ID .

    L_BRACKET       reduce using rule 51 (listArray -> ID .)
    DOT             reduce using rule 51 (listArray -> ID .)
    R_PAR           reduce using rule 51 (listArray -> ID .)
    PLUS            reduce using rule 51 (listArray -> ID .)
    MINUS           reduce using rule 51 (listArray -> ID .)
    BY              reduce using rule 51 (listArray -> ID .)
    DIVISION        reduce using rule 51 (listArray -> ID .)
    MODULO          reduce using rule 51 (listArray -> ID .)
    EQEQUAL         reduce using rule 51 (listArray -> ID .)
    DIF             reduce using rule 51 (listArray -> ID .)
    GREATER         reduce using rule 51 (listArray -> ID .)
    GREATER_E       reduce using rule 51 (listArray -> ID .)
    LESS            reduce using rule 51 (listArray -> ID .)
    LESS_E          reduce using rule 51 (listArray -> ID .)
    AND             reduce using rule 51 (listArray -> ID .)
    OR              reduce using rule 51 (listArray -> ID .)
    SEMICOLON       reduce using rule 51 (listArray -> ID .)
    R_BRACKET       reduce using rule 51 (listArray -> ID .)
    COMMA           reduce using rule 51 (listArray -> ID .)


state 36

    (12) declaration -> VAR ID COLON . type EQUAL expression SEMICOLON
    (14) declaration -> VAR ID COLON . type SEMICOLON
    (20) type -> . NUMBER
    (21) type -> . FLOAT
    (22) type -> . STRING
    (23) type -> . BOOLEAN
    (24) type -> . CHAR

    NUMBER          shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    BOOLEAN         shift and go to state 69
    CHAR            shift and go to state 70

    type                           shift and go to state 65

state 37

    (13) declaration -> VAR ID EQUAL . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 71
    listArray                      shift and go to state 33

state 38

    (17) assignment -> ID EQUAL expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 72
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 39

    (18) assignment -> ID ADD_ASSIGN expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 73
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 40

    (19) assignment -> ID SUB_ASSIGN expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 74
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 41

    (15) declaration -> CONST ID COLON . type EQUAL expression SEMICOLON
    (20) type -> . NUMBER
    (21) type -> . FLOAT
    (22) type -> . STRING
    (23) type -> . BOOLEAN
    (24) type -> . CHAR

    NUMBER          shift and go to state 66
    FLOAT           shift and go to state 67
    STRING          shift and go to state 68
    BOOLEAN         shift and go to state 69
    CHAR            shift and go to state 70

    type                           shift and go to state 75

state 42

    (16) declaration -> CONST ID EQUAL . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 76
    listArray                      shift and go to state 33

state 43

    (11) else_if_instruction -> ELSE IF L_PAR . expression R_PAR L_KEY block R_KEY
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 77
    listArray                      shift and go to state 33

state 44

    (8) print -> CONSOLE DOT LOG L_PAR . expressionList R_PAR SEMICOLON
    (25) expressionList -> . expressionList COMMA expression
    (26) expressionList -> . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expressionList                 shift and go to state 78
    expression                     shift and go to state 64
    listArray                      shift and go to state 33

state 45

    (41) expression -> L_PAR expression . R_PAR
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           shift and go to state 79
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 46

    (9) if_instruction -> IF L_PAR expression R_PAR . L_KEY block R_KEY

    L_KEY           shift and go to state 80


state 47

    (27) expression -> expression PLUS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 81
    listArray                      shift and go to state 33

state 48

    (28) expression -> expression MINUS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 82
    listArray                      shift and go to state 33

state 49

    (29) expression -> expression BY . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 83
    listArray                      shift and go to state 33

state 50

    (30) expression -> expression DIVISION . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 84
    listArray                      shift and go to state 33

state 51

    (31) expression -> expression MODULO . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 85
    listArray                      shift and go to state 33

state 52

    (32) expression -> expression EQEQUAL . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 86
    listArray                      shift and go to state 33

state 53

    (33) expression -> expression DIF . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 87
    listArray                      shift and go to state 33

state 54

    (34) expression -> expression GREATER . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 88
    listArray                      shift and go to state 33

state 55

    (35) expression -> expression GREATER_E . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 89
    listArray                      shift and go to state 33

state 56

    (36) expression -> expression LESS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 90
    listArray                      shift and go to state 33

state 57

    (37) expression -> expression LESS_E . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 91
    listArray                      shift and go to state 33

state 58

    (38) expression -> expression AND . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 92
    listArray                      shift and go to state 33

state 59

    (39) expression -> expression OR . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 93
    listArray                      shift and go to state 33

state 60

    (40) expression -> NEGATE expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BY resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQEQUAL resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_E resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_E resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAR           reduce using rule 40 (expression -> NEGATE expression .)
    SEMICOLON       reduce using rule 40 (expression -> NEGATE expression .)
    R_BRACKET       reduce using rule 40 (expression -> NEGATE expression .)
    COMMA           reduce using rule 40 (expression -> NEGATE expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! PLUS            [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! BY              [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! DIVISION        [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! MODULO          [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! EQEQUAL         [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! DIF             [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! GREATER         [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! GREATER_E       [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! LESS            [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! LESS_E          [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! AND             [ reduce using rule 40 (expression -> NEGATE expression .) ]
  ! OR              [ reduce using rule 40 (expression -> NEGATE expression .) ]


state 61

    (49) listArray -> listArray L_BRACKET . expression R_BRACKET
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    listArray                      shift and go to state 33
    expression                     shift and go to state 94

state 62

    (50) listArray -> listArray DOT . ID

    ID              shift and go to state 95


state 63

    (48) expression -> L_BRACKET expressionList . R_BRACKET
    (25) expressionList -> expressionList . COMMA expression

    R_BRACKET       shift and go to state 96
    COMMA           shift and go to state 97


state 64

    (26) expressionList -> expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_BRACKET       reduce using rule 26 (expressionList -> expression .)
    COMMA           reduce using rule 26 (expressionList -> expression .)
    R_PAR           reduce using rule 26 (expressionList -> expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 65

    (12) declaration -> VAR ID COLON type . EQUAL expression SEMICOLON
    (14) declaration -> VAR ID COLON type . SEMICOLON

    EQUAL           shift and go to state 98
    SEMICOLON       shift and go to state 99


state 66

    (20) type -> NUMBER .

    EQUAL           reduce using rule 20 (type -> NUMBER .)
    SEMICOLON       reduce using rule 20 (type -> NUMBER .)


state 67

    (21) type -> FLOAT .

    EQUAL           reduce using rule 21 (type -> FLOAT .)
    SEMICOLON       reduce using rule 21 (type -> FLOAT .)


state 68

    (22) type -> STRING .

    EQUAL           reduce using rule 22 (type -> STRING .)
    SEMICOLON       reduce using rule 22 (type -> STRING .)


state 69

    (23) type -> BOOLEAN .

    EQUAL           reduce using rule 23 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 23 (type -> BOOLEAN .)


state 70

    (24) type -> CHAR .

    EQUAL           reduce using rule 24 (type -> CHAR .)
    SEMICOLON       reduce using rule 24 (type -> CHAR .)


state 71

    (13) declaration -> VAR ID EQUAL expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 100
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 72

    (17) assignment -> ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)
    R_KEY           reduce using rule 17 (assignment -> ID EQUAL expression SEMICOLON .)


state 73

    (18) assignment -> ID ADD_ASSIGN expression SEMICOLON .

    CONSOLE         reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    IF              reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    ID              reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    $end            reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)
    R_KEY           reduce using rule 18 (assignment -> ID ADD_ASSIGN expression SEMICOLON .)


state 74

    (19) assignment -> ID SUB_ASSIGN expression SEMICOLON .

    CONSOLE         reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    IF              reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    ID              reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    $end            reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)
    R_KEY           reduce using rule 19 (assignment -> ID SUB_ASSIGN expression SEMICOLON .)


state 75

    (15) declaration -> CONST ID COLON type . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 101


state 76

    (16) declaration -> CONST ID EQUAL expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 102
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 77

    (11) else_if_instruction -> ELSE IF L_PAR expression . R_PAR L_KEY block R_KEY
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           shift and go to state 103
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 78

    (8) print -> CONSOLE DOT LOG L_PAR expressionList . R_PAR SEMICOLON
    (25) expressionList -> expressionList . COMMA expression

    R_PAR           shift and go to state 104
    COMMA           shift and go to state 97


state 79

    (41) expression -> L_PAR expression R_PAR .

    R_PAR           reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    PLUS            reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    MINUS           reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    BY              reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    DIVISION        reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    MODULO          reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    EQEQUAL         reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    DIF             reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    GREATER         reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    GREATER_E       reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    LESS            reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    LESS_E          reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    AND             reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    OR              reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    SEMICOLON       reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    R_BRACKET       reduce using rule 41 (expression -> L_PAR expression R_PAR .)
    COMMA           reduce using rule 41 (expression -> L_PAR expression R_PAR .)


state 80

    (9) if_instruction -> IF L_PAR expression R_PAR L_KEY . block R_KEY
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    block                          shift and go to state 105
    instruction                    shift and go to state 3
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 81

    (27) expression -> expression PLUS expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 27 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 27 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 27 (expression -> expression PLUS expression .)
    MODULO          reduce using rule 27 (expression -> expression PLUS expression .)
    EQEQUAL         reduce using rule 27 (expression -> expression PLUS expression .)
    DIF             reduce using rule 27 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 27 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 27 (expression -> expression PLUS expression .)
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! BY              [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! GREATER_E       [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! LESS_E          [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]


state 82

    (28) expression -> expression MINUS expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 28 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 28 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 28 (expression -> expression MINUS expression .)
    MODULO          reduce using rule 28 (expression -> expression MINUS expression .)
    EQEQUAL         reduce using rule 28 (expression -> expression MINUS expression .)
    DIF             reduce using rule 28 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 28 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 28 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 28 (expression -> expression MINUS expression .)
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! BY              [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! GREATER_E       [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! LESS_E          [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]


state 83

    (29) expression -> expression BY expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 29 (expression -> expression BY expression .)
    PLUS            reduce using rule 29 (expression -> expression BY expression .)
    MINUS           reduce using rule 29 (expression -> expression BY expression .)
    BY              reduce using rule 29 (expression -> expression BY expression .)
    DIVISION        reduce using rule 29 (expression -> expression BY expression .)
    MODULO          reduce using rule 29 (expression -> expression BY expression .)
    EQEQUAL         reduce using rule 29 (expression -> expression BY expression .)
    DIF             reduce using rule 29 (expression -> expression BY expression .)
    SEMICOLON       reduce using rule 29 (expression -> expression BY expression .)
    R_BRACKET       reduce using rule 29 (expression -> expression BY expression .)
    COMMA           reduce using rule 29 (expression -> expression BY expression .)
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! GREATER         [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! GREATER_E       [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! LESS            [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! LESS_E          [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression BY expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]


state 84

    (30) expression -> expression DIVISION expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 30 (expression -> expression DIVISION expression .)
    PLUS            reduce using rule 30 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 30 (expression -> expression DIVISION expression .)
    BY              reduce using rule 30 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 30 (expression -> expression DIVISION expression .)
    MODULO          reduce using rule 30 (expression -> expression DIVISION expression .)
    EQEQUAL         reduce using rule 30 (expression -> expression DIVISION expression .)
    DIF             reduce using rule 30 (expression -> expression DIVISION expression .)
    SEMICOLON       reduce using rule 30 (expression -> expression DIVISION expression .)
    R_BRACKET       reduce using rule 30 (expression -> expression DIVISION expression .)
    COMMA           reduce using rule 30 (expression -> expression DIVISION expression .)
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! GREATER         [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! GREATER_E       [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! LESS            [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! LESS_E          [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression DIVISION expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]


state 85

    (31) expression -> expression MODULO expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BY resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQEQUAL resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_E resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_E resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAR           reduce using rule 31 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 31 (expression -> expression MODULO expression .)
    R_BRACKET       reduce using rule 31 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 31 (expression -> expression MODULO expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! PLUS            [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! BY              [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! DIVISION        [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! EQEQUAL         [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! DIF             [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! GREATER         [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! GREATER_E       [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! LESS            [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! LESS_E          [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression MODULO expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression MODULO expression .) ]


state 86

    (32) expression -> expression EQEQUAL expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BY resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQEQUAL resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_E resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_E resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAR           reduce using rule 32 (expression -> expression EQEQUAL expression .)
    SEMICOLON       reduce using rule 32 (expression -> expression EQEQUAL expression .)
    R_BRACKET       reduce using rule 32 (expression -> expression EQEQUAL expression .)
    COMMA           reduce using rule 32 (expression -> expression EQEQUAL expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! PLUS            [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! BY              [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! DIVISION        [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! MODULO          [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! EQEQUAL         [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! DIF             [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! GREATER         [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! GREATER_E       [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! LESS            [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! LESS_E          [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! AND             [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]
  ! OR              [ reduce using rule 32 (expression -> expression EQEQUAL expression .) ]


state 87

    (33) expression -> expression DIF expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for BY resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQEQUAL resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_E resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_E resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_PAR           reduce using rule 33 (expression -> expression DIF expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression DIF expression .)
    R_BRACKET       reduce using rule 33 (expression -> expression DIF expression .)
    COMMA           reduce using rule 33 (expression -> expression DIF expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! PLUS            [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! BY              [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! DIVISION        [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! MODULO          [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! EQEQUAL         [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! DIF             [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! GREATER         [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! GREATER_E       [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! LESS            [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! LESS_E          [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! AND             [ reduce using rule 33 (expression -> expression DIF expression .) ]
  ! OR              [ reduce using rule 33 (expression -> expression DIF expression .) ]


state 88

    (34) expression -> expression GREATER expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 34 (expression -> expression GREATER expression .)
    PLUS            reduce using rule 34 (expression -> expression GREATER expression .)
    MINUS           reduce using rule 34 (expression -> expression GREATER expression .)
    BY              reduce using rule 34 (expression -> expression GREATER expression .)
    DIVISION        reduce using rule 34 (expression -> expression GREATER expression .)
    MODULO          reduce using rule 34 (expression -> expression GREATER expression .)
    EQEQUAL         reduce using rule 34 (expression -> expression GREATER expression .)
    DIF             reduce using rule 34 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 34 (expression -> expression GREATER expression .)
    LESS            reduce using rule 34 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression GREATER expression .)
    R_BRACKET       reduce using rule 34 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 34 (expression -> expression GREATER expression .)
    GREATER_E       shift and go to state 55
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! GREATER_E       [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! LESS_E          [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESS            [ shift and go to state 56 ]


state 89

    (35) expression -> expression GREATER_E expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 35 (expression -> expression GREATER_E expression .)
    PLUS            reduce using rule 35 (expression -> expression GREATER_E expression .)
    MINUS           reduce using rule 35 (expression -> expression GREATER_E expression .)
    BY              reduce using rule 35 (expression -> expression GREATER_E expression .)
    DIVISION        reduce using rule 35 (expression -> expression GREATER_E expression .)
    MODULO          reduce using rule 35 (expression -> expression GREATER_E expression .)
    EQEQUAL         reduce using rule 35 (expression -> expression GREATER_E expression .)
    DIF             reduce using rule 35 (expression -> expression GREATER_E expression .)
    GREATER         reduce using rule 35 (expression -> expression GREATER_E expression .)
    GREATER_E       reduce using rule 35 (expression -> expression GREATER_E expression .)
    LESS            reduce using rule 35 (expression -> expression GREATER_E expression .)
    LESS_E          reduce using rule 35 (expression -> expression GREATER_E expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression GREATER_E expression .)
    R_BRACKET       reduce using rule 35 (expression -> expression GREATER_E expression .)
    COMMA           reduce using rule 35 (expression -> expression GREATER_E expression .)
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! AND             [ reduce using rule 35 (expression -> expression GREATER_E expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression GREATER_E expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! GREATER_E       [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! LESS_E          [ shift and go to state 57 ]


state 90

    (36) expression -> expression LESS expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 36 (expression -> expression LESS expression .)
    PLUS            reduce using rule 36 (expression -> expression LESS expression .)
    MINUS           reduce using rule 36 (expression -> expression LESS expression .)
    BY              reduce using rule 36 (expression -> expression LESS expression .)
    DIVISION        reduce using rule 36 (expression -> expression LESS expression .)
    MODULO          reduce using rule 36 (expression -> expression LESS expression .)
    EQEQUAL         reduce using rule 36 (expression -> expression LESS expression .)
    DIF             reduce using rule 36 (expression -> expression LESS expression .)
    GREATER         reduce using rule 36 (expression -> expression LESS expression .)
    LESS            reduce using rule 36 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression LESS expression .)
    R_BRACKET       reduce using rule 36 (expression -> expression LESS expression .)
    COMMA           reduce using rule 36 (expression -> expression LESS expression .)
    GREATER_E       shift and go to state 55
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! GREATER_E       [ reduce using rule 36 (expression -> expression LESS expression .) ]
  ! LESS_E          [ reduce using rule 36 (expression -> expression LESS expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression LESS expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression LESS expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESS            [ shift and go to state 56 ]


state 91

    (37) expression -> expression LESS_E expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 37 (expression -> expression LESS_E expression .)
    PLUS            reduce using rule 37 (expression -> expression LESS_E expression .)
    MINUS           reduce using rule 37 (expression -> expression LESS_E expression .)
    BY              reduce using rule 37 (expression -> expression LESS_E expression .)
    DIVISION        reduce using rule 37 (expression -> expression LESS_E expression .)
    MODULO          reduce using rule 37 (expression -> expression LESS_E expression .)
    EQEQUAL         reduce using rule 37 (expression -> expression LESS_E expression .)
    DIF             reduce using rule 37 (expression -> expression LESS_E expression .)
    GREATER         reduce using rule 37 (expression -> expression LESS_E expression .)
    GREATER_E       reduce using rule 37 (expression -> expression LESS_E expression .)
    LESS            reduce using rule 37 (expression -> expression LESS_E expression .)
    LESS_E          reduce using rule 37 (expression -> expression LESS_E expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression LESS_E expression .)
    R_BRACKET       reduce using rule 37 (expression -> expression LESS_E expression .)
    COMMA           reduce using rule 37 (expression -> expression LESS_E expression .)
    AND             shift and go to state 58
    OR              shift and go to state 59

  ! AND             [ reduce using rule 37 (expression -> expression LESS_E expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression LESS_E expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! GREATER_E       [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! LESS_E          [ shift and go to state 57 ]


state 92

    (38) expression -> expression AND expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 38 (expression -> expression AND expression .)
    PLUS            reduce using rule 38 (expression -> expression AND expression .)
    MINUS           reduce using rule 38 (expression -> expression AND expression .)
    BY              reduce using rule 38 (expression -> expression AND expression .)
    DIVISION        reduce using rule 38 (expression -> expression AND expression .)
    MODULO          reduce using rule 38 (expression -> expression AND expression .)
    EQEQUAL         reduce using rule 38 (expression -> expression AND expression .)
    DIF             reduce using rule 38 (expression -> expression AND expression .)
    GREATER         reduce using rule 38 (expression -> expression AND expression .)
    GREATER_E       reduce using rule 38 (expression -> expression AND expression .)
    LESS            reduce using rule 38 (expression -> expression AND expression .)
    LESS_E          reduce using rule 38 (expression -> expression AND expression .)
    AND             reduce using rule 38 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression AND expression .)
    R_BRACKET       reduce using rule 38 (expression -> expression AND expression .)
    COMMA           reduce using rule 38 (expression -> expression AND expression .)
    OR              shift and go to state 59

  ! OR              [ reduce using rule 38 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! GREATER_E       [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! LESS_E          [ shift and go to state 57 ]
  ! AND             [ shift and go to state 58 ]


state 93

    (39) expression -> expression OR expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_PAR           reduce using rule 39 (expression -> expression OR expression .)
    PLUS            reduce using rule 39 (expression -> expression OR expression .)
    MINUS           reduce using rule 39 (expression -> expression OR expression .)
    BY              reduce using rule 39 (expression -> expression OR expression .)
    DIVISION        reduce using rule 39 (expression -> expression OR expression .)
    MODULO          reduce using rule 39 (expression -> expression OR expression .)
    EQEQUAL         reduce using rule 39 (expression -> expression OR expression .)
    DIF             reduce using rule 39 (expression -> expression OR expression .)
    GREATER         reduce using rule 39 (expression -> expression OR expression .)
    GREATER_E       reduce using rule 39 (expression -> expression OR expression .)
    LESS            reduce using rule 39 (expression -> expression OR expression .)
    LESS_E          reduce using rule 39 (expression -> expression OR expression .)
    AND             reduce using rule 39 (expression -> expression OR expression .)
    OR              reduce using rule 39 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression OR expression .)
    R_BRACKET       reduce using rule 39 (expression -> expression OR expression .)
    COMMA           reduce using rule 39 (expression -> expression OR expression .)

  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! BY              [ shift and go to state 49 ]
  ! DIVISION        [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! EQEQUAL         [ shift and go to state 52 ]
  ! DIF             [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! GREATER_E       [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! LESS_E          [ shift and go to state 57 ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]


state 94

    (49) listArray -> listArray L_BRACKET expression . R_BRACKET
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_BRACKET       shift and go to state 106
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 95

    (50) listArray -> listArray DOT ID .

    L_BRACKET       reduce using rule 50 (listArray -> listArray DOT ID .)
    DOT             reduce using rule 50 (listArray -> listArray DOT ID .)
    R_PAR           reduce using rule 50 (listArray -> listArray DOT ID .)
    PLUS            reduce using rule 50 (listArray -> listArray DOT ID .)
    MINUS           reduce using rule 50 (listArray -> listArray DOT ID .)
    BY              reduce using rule 50 (listArray -> listArray DOT ID .)
    DIVISION        reduce using rule 50 (listArray -> listArray DOT ID .)
    MODULO          reduce using rule 50 (listArray -> listArray DOT ID .)
    EQEQUAL         reduce using rule 50 (listArray -> listArray DOT ID .)
    DIF             reduce using rule 50 (listArray -> listArray DOT ID .)
    GREATER         reduce using rule 50 (listArray -> listArray DOT ID .)
    GREATER_E       reduce using rule 50 (listArray -> listArray DOT ID .)
    LESS            reduce using rule 50 (listArray -> listArray DOT ID .)
    LESS_E          reduce using rule 50 (listArray -> listArray DOT ID .)
    AND             reduce using rule 50 (listArray -> listArray DOT ID .)
    OR              reduce using rule 50 (listArray -> listArray DOT ID .)
    SEMICOLON       reduce using rule 50 (listArray -> listArray DOT ID .)
    R_BRACKET       reduce using rule 50 (listArray -> listArray DOT ID .)
    COMMA           reduce using rule 50 (listArray -> listArray DOT ID .)


state 96

    (48) expression -> L_BRACKET expressionList R_BRACKET .

    R_PAR           reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    PLUS            reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    MINUS           reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    BY              reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    DIVISION        reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    MODULO          reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    EQEQUAL         reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    DIF             reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    GREATER         reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    GREATER_E       reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    LESS            reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    LESS_E          reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    AND             reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    OR              reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    SEMICOLON       reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    R_BRACKET       reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)
    COMMA           reduce using rule 48 (expression -> L_BRACKET expressionList R_BRACKET .)


state 97

    (25) expressionList -> expressionList COMMA . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 107
    listArray                      shift and go to state 33

state 98

    (12) declaration -> VAR ID COLON type EQUAL . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 108
    listArray                      shift and go to state 33

state 99

    (14) declaration -> VAR ID COLON type SEMICOLON .

    CONSOLE         reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    IF              reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    VAR             reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    CONST           reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    ID              reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    $end            reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)
    R_KEY           reduce using rule 14 (declaration -> VAR ID COLON type SEMICOLON .)


state 100

    (13) declaration -> VAR ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    R_KEY           reduce using rule 13 (declaration -> VAR ID EQUAL expression SEMICOLON .)


state 101

    (15) declaration -> CONST ID COLON type EQUAL . expression SEMICOLON
    (27) expression -> . expression PLUS expression
    (28) expression -> . expression MINUS expression
    (29) expression -> . expression BY expression
    (30) expression -> . expression DIVISION expression
    (31) expression -> . expression MODULO expression
    (32) expression -> . expression EQEQUAL expression
    (33) expression -> . expression DIF expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_E expression
    (36) expression -> . expression LESS expression
    (37) expression -> . expression LESS_E expression
    (38) expression -> . expression AND expression
    (39) expression -> . expression OR expression
    (40) expression -> . NEGATE expression
    (41) expression -> . L_PAR expression R_PAR
    (42) expression -> . NUMBER
    (43) expression -> . STRING
    (44) expression -> . FLOAT
    (45) expression -> . CHAR
    (46) expression -> . BOOLEAN
    (47) expression -> . listArray
    (48) expression -> . L_BRACKET expressionList R_BRACKET
    (49) listArray -> . listArray L_BRACKET expression R_BRACKET
    (50) listArray -> . listArray DOT ID
    (51) listArray -> . ID

    NEGATE          shift and go to state 27
    L_PAR           shift and go to state 25
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    BOOLEAN         shift and go to state 32
    L_BRACKET       shift and go to state 34
    ID              shift and go to state 35

    expression                     shift and go to state 109
    listArray                      shift and go to state 33

state 102

    (16) declaration -> CONST ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    R_KEY           reduce using rule 16 (declaration -> CONST ID EQUAL expression SEMICOLON .)


state 103

    (11) else_if_instruction -> ELSE IF L_PAR expression R_PAR . L_KEY block R_KEY

    L_KEY           shift and go to state 110


state 104

    (8) print -> CONSOLE DOT LOG L_PAR expressionList R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 111


state 105

    (9) if_instruction -> IF L_PAR expression R_PAR L_KEY block . R_KEY
    (2) block -> block . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    R_KEY           shift and go to state 112
    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    instruction                    shift and go to state 13
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 106

    (49) listArray -> listArray L_BRACKET expression R_BRACKET .

    L_BRACKET       reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    DOT             reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    R_PAR           reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    BY              reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    DIVISION        reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    MODULO          reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    EQEQUAL         reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    DIF             reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    GREATER         reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    GREATER_E       reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    LESS            reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    LESS_E          reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    AND             reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    OR              reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 49 (listArray -> listArray L_BRACKET expression R_BRACKET .)


state 107

    (25) expressionList -> expressionList COMMA expression .
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    R_BRACKET       reduce using rule 25 (expressionList -> expressionList COMMA expression .)
    COMMA           reduce using rule 25 (expressionList -> expressionList COMMA expression .)
    R_PAR           reduce using rule 25 (expressionList -> expressionList COMMA expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 108

    (12) declaration -> VAR ID COLON type EQUAL expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 113
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 109

    (15) declaration -> CONST ID COLON type EQUAL expression . SEMICOLON
    (27) expression -> expression . PLUS expression
    (28) expression -> expression . MINUS expression
    (29) expression -> expression . BY expression
    (30) expression -> expression . DIVISION expression
    (31) expression -> expression . MODULO expression
    (32) expression -> expression . EQEQUAL expression
    (33) expression -> expression . DIF expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_E expression
    (36) expression -> expression . LESS expression
    (37) expression -> expression . LESS_E expression
    (38) expression -> expression . AND expression
    (39) expression -> expression . OR expression

    SEMICOLON       shift and go to state 114
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    BY              shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51
    EQEQUAL         shift and go to state 52
    DIF             shift and go to state 53
    GREATER         shift and go to state 54
    GREATER_E       shift and go to state 55
    LESS            shift and go to state 56
    LESS_E          shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59


state 110

    (11) else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY . block R_KEY
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    block                          shift and go to state 115
    instruction                    shift and go to state 3
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 111

    (8) print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .

    CONSOLE         reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    IF              reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    VAR             reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    CONST           reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    ID              reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    $end            reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    R_KEY           reduce using rule 8 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)


state 112

    (9) if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .

    ELSE            reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    CONSOLE         reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    IF              reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    VAR             reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    CONST           reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    ID              reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    $end            reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)
    R_KEY           reduce using rule 9 (if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY .)


state 113

    (12) declaration -> VAR ID COLON type EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    R_KEY           reduce using rule 12 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)


state 114

    (15) declaration -> CONST ID COLON type EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    R_KEY           reduce using rule 15 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)


state 115

    (11) else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block . R_KEY
    (2) block -> block . instruction
    (4) instruction -> . print
    (5) instruction -> . if_instruction
    (6) instruction -> . declaration
    (7) instruction -> . assignment
    (8) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (9) if_instruction -> . IF L_PAR expression R_PAR L_KEY block R_KEY
    (10) if_instruction -> . if_instruction else_if_instruction
    (12) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (13) declaration -> . VAR ID EQUAL expression SEMICOLON
    (14) declaration -> . VAR ID COLON type SEMICOLON
    (15) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (16) declaration -> . CONST ID EQUAL expression SEMICOLON
    (17) assignment -> . ID EQUAL expression SEMICOLON
    (18) assignment -> . ID ADD_ASSIGN expression SEMICOLON
    (19) assignment -> . ID SUB_ASSIGN expression SEMICOLON

    R_KEY           shift and go to state 116
    CONSOLE         shift and go to state 8
    IF              shift and go to state 9
    VAR             shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 11

    instruction                    shift and go to state 13
    print                          shift and go to state 4
    if_instruction                 shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7

state 116

    (11) else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .

    ELSE            reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    CONSOLE         reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    IF              reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    VAR             reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    CONST           reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    ID              reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    $end            reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)
    R_KEY           reduce using rule 11 (else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for BY in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 60 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 60 resolved as shift
WARNING: shift/reduce conflict for EQEQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for DIF in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_E in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_E in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for BY in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 85 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 85 resolved as shift
WARNING: shift/reduce conflict for EQEQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for DIF in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_E in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_E in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for BY in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 86 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 86 resolved as shift
WARNING: shift/reduce conflict for EQEQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for DIF in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_E in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_E in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for BY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 87 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 87 resolved as shift
WARNING: shift/reduce conflict for EQEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for DIF in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_E in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_E in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
