Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CONTINUE
    DECIMAL
    DIF
    EQEQUAL
    GREATER
    GREATER_T
    IF
    INT
    LESS
    LESS_T
    L_KEY
    OR
    RETURN
    R_KEY
    WHILE

Grammar

Rule 0     S' -> s
Rule 1     s -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> print
Rule 5     instruction -> declaration
Rule 6     instruction -> assignment
Rule 7     print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
Rule 8     declaration -> VAR ID COLON type EQUAL expression SEMICOLON
Rule 9     declaration -> VAR ID EQUAL expression SEMICOLON
Rule 10    declaration -> VAR ID COLON type SEMICOLON
Rule 11    declaration -> CONST ID COLON type EQUAL expression SEMICOLON
Rule 12    declaration -> CONST ID EQUAL expression SEMICOLON
Rule 13    assignment -> ID EQUAL expression SEMICOLON
Rule 14    type -> NUMBER
Rule 15    type -> FLOAT
Rule 16    type -> STRING
Rule 17    type -> BOOL
Rule 18    expressionList -> expressionList COMMA expression
Rule 19    expressionList -> expression
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> expression BY expression
Rule 23    expression -> expression DIVISION expression
Rule 24    expression -> L_PAR expression R_PAR
Rule 25    expression -> NUMBER
Rule 26    expression -> STRING
Rule 27    expression -> FLOAT
Rule 28    expression -> listArray
Rule 29    expression -> L_BRACKET expressionList R_BRACKET
Rule 30    listArray -> listArray L_BRACKET expression R_BRACKET
Rule 31    listArray -> listArray DOT ID
Rule 32    listArray -> ID

Terminals, with rules where they appear

AND                  : 
BOOL                 : 17
BREAK                : 
BY                   : 22
COLON                : 8 10 11
COMMA                : 18
CONSOLE              : 7
CONST                : 11 12
CONTINUE             : 
DECIMAL              : 
DIF                  : 
DIVISION             : 23
DOT                  : 7 31
EQEQUAL              : 
EQUAL                : 8 9 11 12 13
FLOAT                : 15 27
GREATER              : 
GREATER_T            : 
ID                   : 8 9 10 11 12 13 31 32
IF                   : 
INT                  : 
LESS                 : 
LESS_T               : 
LOG                  : 7
L_BRACKET            : 29 30
L_KEY                : 
L_PAR                : 7 24
MINUS                : 21
NUMBER               : 14 25
OR                   : 
PLUS                 : 20
RETURN               : 
R_BRACKET            : 29 30
R_KEY                : 
R_PAR                : 7 24
SEMICOLON            : 7 8 9 10 11 12 13
STRING               : 16 26
VAR                  : 8 9 10
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 6
block                : 1 2
declaration          : 5
expression           : 8 9 11 12 13 18 19 20 20 21 21 22 22 23 23 24 30
expressionList       : 7 18 29
instruction          : 2 3
listArray            : 28 30 31
print                : 4
s                    : 0
type                 : 8 10 11

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . print
    (5) instruction -> . declaration
    (6) instruction -> . assignment
    (7) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (8) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (9) declaration -> . VAR ID EQUAL expression SEMICOLON
    (10) declaration -> . VAR ID COLON type SEMICOLON
    (11) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (12) declaration -> . CONST ID EQUAL expression SEMICOLON
    (13) assignment -> . ID EQUAL expression SEMICOLON

    CONSOLE         shift and go to state 7
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    ID              shift and go to state 9

    s                              shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    print                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6

state 1

    (0) S' -> s .



state 2

    (1) s -> block .
    (2) block -> block . instruction
    (4) instruction -> . print
    (5) instruction -> . declaration
    (6) instruction -> . assignment
    (7) print -> . CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON
    (8) declaration -> . VAR ID COLON type EQUAL expression SEMICOLON
    (9) declaration -> . VAR ID EQUAL expression SEMICOLON
    (10) declaration -> . VAR ID COLON type SEMICOLON
    (11) declaration -> . CONST ID COLON type EQUAL expression SEMICOLON
    (12) declaration -> . CONST ID EQUAL expression SEMICOLON
    (13) assignment -> . ID EQUAL expression SEMICOLON

    $end            reduce using rule 1 (s -> block .)
    CONSOLE         shift and go to state 7
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    ID              shift and go to state 9

    instruction                    shift and go to state 11
    print                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6

state 3

    (3) block -> instruction .

    CONSOLE         reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    CONST           reduce using rule 3 (block -> instruction .)
    ID              reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> print .

    CONSOLE         reduce using rule 4 (instruction -> print .)
    VAR             reduce using rule 4 (instruction -> print .)
    CONST           reduce using rule 4 (instruction -> print .)
    ID              reduce using rule 4 (instruction -> print .)
    $end            reduce using rule 4 (instruction -> print .)


state 5

    (5) instruction -> declaration .

    CONSOLE         reduce using rule 5 (instruction -> declaration .)
    VAR             reduce using rule 5 (instruction -> declaration .)
    CONST           reduce using rule 5 (instruction -> declaration .)
    ID              reduce using rule 5 (instruction -> declaration .)
    $end            reduce using rule 5 (instruction -> declaration .)


state 6

    (6) instruction -> assignment .

    CONSOLE         reduce using rule 6 (instruction -> assignment .)
    VAR             reduce using rule 6 (instruction -> assignment .)
    CONST           reduce using rule 6 (instruction -> assignment .)
    ID              reduce using rule 6 (instruction -> assignment .)
    $end            reduce using rule 6 (instruction -> assignment .)


state 7

    (7) print -> CONSOLE . DOT LOG L_PAR expressionList R_PAR SEMICOLON

    DOT             shift and go to state 12


state 8

    (8) declaration -> VAR . ID COLON type EQUAL expression SEMICOLON
    (9) declaration -> VAR . ID EQUAL expression SEMICOLON
    (10) declaration -> VAR . ID COLON type SEMICOLON

    ID              shift and go to state 13


state 9

    (13) assignment -> ID . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 14


state 10

    (11) declaration -> CONST . ID COLON type EQUAL expression SEMICOLON
    (12) declaration -> CONST . ID EQUAL expression SEMICOLON

    ID              shift and go to state 15


state 11

    (2) block -> block instruction .

    CONSOLE         reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    CONST           reduce using rule 2 (block -> block instruction .)
    ID              reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)


state 12

    (7) print -> CONSOLE DOT . LOG L_PAR expressionList R_PAR SEMICOLON

    LOG             shift and go to state 16


state 13

    (8) declaration -> VAR ID . COLON type EQUAL expression SEMICOLON
    (9) declaration -> VAR ID . EQUAL expression SEMICOLON
    (10) declaration -> VAR ID . COLON type SEMICOLON

    COLON           shift and go to state 17
    EQUAL           shift and go to state 18


state 14

    (13) assignment -> ID EQUAL . expression SEMICOLON
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 20
    listArray                      shift and go to state 25

state 15

    (11) declaration -> CONST ID . COLON type EQUAL expression SEMICOLON
    (12) declaration -> CONST ID . EQUAL expression SEMICOLON

    COLON           shift and go to state 27
    EQUAL           shift and go to state 28


state 16

    (7) print -> CONSOLE DOT LOG . L_PAR expressionList R_PAR SEMICOLON

    L_PAR           shift and go to state 29


state 17

    (8) declaration -> VAR ID COLON . type EQUAL expression SEMICOLON
    (10) declaration -> VAR ID COLON . type SEMICOLON
    (14) type -> . NUMBER
    (15) type -> . FLOAT
    (16) type -> . STRING
    (17) type -> . BOOL

    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33
    BOOL            shift and go to state 34

    type                           shift and go to state 30

state 18

    (9) declaration -> VAR ID EQUAL . expression SEMICOLON
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 35
    listArray                      shift and go to state 25

state 19

    (32) listArray -> ID .

    L_BRACKET       reduce using rule 32 (listArray -> ID .)
    DOT             reduce using rule 32 (listArray -> ID .)
    SEMICOLON       reduce using rule 32 (listArray -> ID .)
    PLUS            reduce using rule 32 (listArray -> ID .)
    MINUS           reduce using rule 32 (listArray -> ID .)
    BY              reduce using rule 32 (listArray -> ID .)
    DIVISION        reduce using rule 32 (listArray -> ID .)
    R_PAR           reduce using rule 32 (listArray -> ID .)
    R_BRACKET       reduce using rule 32 (listArray -> ID .)
    COMMA           reduce using rule 32 (listArray -> ID .)


state 20

    (13) assignment -> ID EQUAL expression . SEMICOLON
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 21

    (24) expression -> L_PAR . expression R_PAR
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 41
    listArray                      shift and go to state 25

state 22

    (25) expression -> NUMBER .

    SEMICOLON       reduce using rule 25 (expression -> NUMBER .)
    PLUS            reduce using rule 25 (expression -> NUMBER .)
    MINUS           reduce using rule 25 (expression -> NUMBER .)
    BY              reduce using rule 25 (expression -> NUMBER .)
    DIVISION        reduce using rule 25 (expression -> NUMBER .)
    R_PAR           reduce using rule 25 (expression -> NUMBER .)
    R_BRACKET       reduce using rule 25 (expression -> NUMBER .)
    COMMA           reduce using rule 25 (expression -> NUMBER .)


state 23

    (26) expression -> STRING .

    SEMICOLON       reduce using rule 26 (expression -> STRING .)
    PLUS            reduce using rule 26 (expression -> STRING .)
    MINUS           reduce using rule 26 (expression -> STRING .)
    BY              reduce using rule 26 (expression -> STRING .)
    DIVISION        reduce using rule 26 (expression -> STRING .)
    R_PAR           reduce using rule 26 (expression -> STRING .)
    R_BRACKET       reduce using rule 26 (expression -> STRING .)
    COMMA           reduce using rule 26 (expression -> STRING .)


state 24

    (27) expression -> FLOAT .

    SEMICOLON       reduce using rule 27 (expression -> FLOAT .)
    PLUS            reduce using rule 27 (expression -> FLOAT .)
    MINUS           reduce using rule 27 (expression -> FLOAT .)
    BY              reduce using rule 27 (expression -> FLOAT .)
    DIVISION        reduce using rule 27 (expression -> FLOAT .)
    R_PAR           reduce using rule 27 (expression -> FLOAT .)
    R_BRACKET       reduce using rule 27 (expression -> FLOAT .)
    COMMA           reduce using rule 27 (expression -> FLOAT .)


state 25

    (28) expression -> listArray .
    (30) listArray -> listArray . L_BRACKET expression R_BRACKET
    (31) listArray -> listArray . DOT ID

    SEMICOLON       reduce using rule 28 (expression -> listArray .)
    PLUS            reduce using rule 28 (expression -> listArray .)
    MINUS           reduce using rule 28 (expression -> listArray .)
    BY              reduce using rule 28 (expression -> listArray .)
    DIVISION        reduce using rule 28 (expression -> listArray .)
    R_PAR           reduce using rule 28 (expression -> listArray .)
    R_BRACKET       reduce using rule 28 (expression -> listArray .)
    COMMA           reduce using rule 28 (expression -> listArray .)
    L_BRACKET       shift and go to state 42
    DOT             shift and go to state 43


state 26

    (29) expression -> L_BRACKET . expressionList R_BRACKET
    (18) expressionList -> . expressionList COMMA expression
    (19) expressionList -> . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expressionList                 shift and go to state 44
    expression                     shift and go to state 45
    listArray                      shift and go to state 25

state 27

    (11) declaration -> CONST ID COLON . type EQUAL expression SEMICOLON
    (14) type -> . NUMBER
    (15) type -> . FLOAT
    (16) type -> . STRING
    (17) type -> . BOOL

    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33
    BOOL            shift and go to state 34

    type                           shift and go to state 46

state 28

    (12) declaration -> CONST ID EQUAL . expression SEMICOLON
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 47
    listArray                      shift and go to state 25

state 29

    (7) print -> CONSOLE DOT LOG L_PAR . expressionList R_PAR SEMICOLON
    (18) expressionList -> . expressionList COMMA expression
    (19) expressionList -> . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expressionList                 shift and go to state 48
    expression                     shift and go to state 45
    listArray                      shift and go to state 25

state 30

    (8) declaration -> VAR ID COLON type . EQUAL expression SEMICOLON
    (10) declaration -> VAR ID COLON type . SEMICOLON

    EQUAL           shift and go to state 49
    SEMICOLON       shift and go to state 50


state 31

    (14) type -> NUMBER .

    EQUAL           reduce using rule 14 (type -> NUMBER .)
    SEMICOLON       reduce using rule 14 (type -> NUMBER .)


state 32

    (15) type -> FLOAT .

    EQUAL           reduce using rule 15 (type -> FLOAT .)
    SEMICOLON       reduce using rule 15 (type -> FLOAT .)


state 33

    (16) type -> STRING .

    EQUAL           reduce using rule 16 (type -> STRING .)
    SEMICOLON       reduce using rule 16 (type -> STRING .)


state 34

    (17) type -> BOOL .

    EQUAL           reduce using rule 17 (type -> BOOL .)
    SEMICOLON       reduce using rule 17 (type -> BOOL .)


state 35

    (9) declaration -> VAR ID EQUAL expression . SEMICOLON
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 51
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 36

    (13) assignment -> ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 13 (assignment -> ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 13 (assignment -> ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 13 (assignment -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 13 (assignment -> ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 13 (assignment -> ID EQUAL expression SEMICOLON .)


state 37

    (20) expression -> expression PLUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 52
    listArray                      shift and go to state 25

state 38

    (21) expression -> expression MINUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 53
    listArray                      shift and go to state 25

state 39

    (22) expression -> expression BY . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 54
    listArray                      shift and go to state 25

state 40

    (23) expression -> expression DIVISION . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 55
    listArray                      shift and go to state 25

state 41

    (24) expression -> L_PAR expression . R_PAR
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    R_PAR           shift and go to state 56
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 42

    (30) listArray -> listArray L_BRACKET . expression R_BRACKET
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    listArray                      shift and go to state 25
    expression                     shift and go to state 57

state 43

    (31) listArray -> listArray DOT . ID

    ID              shift and go to state 58


state 44

    (29) expression -> L_BRACKET expressionList . R_BRACKET
    (18) expressionList -> expressionList . COMMA expression

    R_BRACKET       shift and go to state 59
    COMMA           shift and go to state 60


state 45

    (19) expressionList -> expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    R_BRACKET       reduce using rule 19 (expressionList -> expression .)
    COMMA           reduce using rule 19 (expressionList -> expression .)
    R_PAR           reduce using rule 19 (expressionList -> expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 46

    (11) declaration -> CONST ID COLON type . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 61


state 47

    (12) declaration -> CONST ID EQUAL expression . SEMICOLON
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 62
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 48

    (7) print -> CONSOLE DOT LOG L_PAR expressionList . R_PAR SEMICOLON
    (18) expressionList -> expressionList . COMMA expression

    R_PAR           shift and go to state 63
    COMMA           shift and go to state 60


state 49

    (8) declaration -> VAR ID COLON type EQUAL . expression SEMICOLON
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 64
    listArray                      shift and go to state 25

state 50

    (10) declaration -> VAR ID COLON type SEMICOLON .

    CONSOLE         reduce using rule 10 (declaration -> VAR ID COLON type SEMICOLON .)
    VAR             reduce using rule 10 (declaration -> VAR ID COLON type SEMICOLON .)
    CONST           reduce using rule 10 (declaration -> VAR ID COLON type SEMICOLON .)
    ID              reduce using rule 10 (declaration -> VAR ID COLON type SEMICOLON .)
    $end            reduce using rule 10 (declaration -> VAR ID COLON type SEMICOLON .)


state 51

    (9) declaration -> VAR ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 9 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 9 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 9 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 9 (declaration -> VAR ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 9 (declaration -> VAR ID EQUAL expression SEMICOLON .)


state 52

    (20) expression -> expression PLUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       reduce using rule 20 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 20 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 20 (expression -> expression PLUS expression .)
    R_PAR           reduce using rule 20 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 20 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 20 (expression -> expression PLUS expression .)
    BY              shift and go to state 39
    DIVISION        shift and go to state 40

  ! BY              [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 53

    (21) expression -> expression MINUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       reduce using rule 21 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 21 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 21 (expression -> expression MINUS expression .)
    R_PAR           reduce using rule 21 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 21 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 21 (expression -> expression MINUS expression .)
    BY              shift and go to state 39
    DIVISION        shift and go to state 40

  ! BY              [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 54

    (22) expression -> expression BY expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       reduce using rule 22 (expression -> expression BY expression .)
    PLUS            reduce using rule 22 (expression -> expression BY expression .)
    MINUS           reduce using rule 22 (expression -> expression BY expression .)
    BY              reduce using rule 22 (expression -> expression BY expression .)
    DIVISION        reduce using rule 22 (expression -> expression BY expression .)
    R_PAR           reduce using rule 22 (expression -> expression BY expression .)
    R_BRACKET       reduce using rule 22 (expression -> expression BY expression .)
    COMMA           reduce using rule 22 (expression -> expression BY expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! BY              [ shift and go to state 39 ]
  ! DIVISION        [ shift and go to state 40 ]


state 55

    (23) expression -> expression DIVISION expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       reduce using rule 23 (expression -> expression DIVISION expression .)
    PLUS            reduce using rule 23 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 23 (expression -> expression DIVISION expression .)
    BY              reduce using rule 23 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 23 (expression -> expression DIVISION expression .)
    R_PAR           reduce using rule 23 (expression -> expression DIVISION expression .)
    R_BRACKET       reduce using rule 23 (expression -> expression DIVISION expression .)
    COMMA           reduce using rule 23 (expression -> expression DIVISION expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! BY              [ shift and go to state 39 ]
  ! DIVISION        [ shift and go to state 40 ]


state 56

    (24) expression -> L_PAR expression R_PAR .

    SEMICOLON       reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    PLUS            reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    MINUS           reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    BY              reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    DIVISION        reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    R_PAR           reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    R_BRACKET       reduce using rule 24 (expression -> L_PAR expression R_PAR .)
    COMMA           reduce using rule 24 (expression -> L_PAR expression R_PAR .)


state 57

    (30) listArray -> listArray L_BRACKET expression . R_BRACKET
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    R_BRACKET       shift and go to state 65
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 58

    (31) listArray -> listArray DOT ID .

    L_BRACKET       reduce using rule 31 (listArray -> listArray DOT ID .)
    DOT             reduce using rule 31 (listArray -> listArray DOT ID .)
    SEMICOLON       reduce using rule 31 (listArray -> listArray DOT ID .)
    PLUS            reduce using rule 31 (listArray -> listArray DOT ID .)
    MINUS           reduce using rule 31 (listArray -> listArray DOT ID .)
    BY              reduce using rule 31 (listArray -> listArray DOT ID .)
    DIVISION        reduce using rule 31 (listArray -> listArray DOT ID .)
    R_PAR           reduce using rule 31 (listArray -> listArray DOT ID .)
    R_BRACKET       reduce using rule 31 (listArray -> listArray DOT ID .)
    COMMA           reduce using rule 31 (listArray -> listArray DOT ID .)


state 59

    (29) expression -> L_BRACKET expressionList R_BRACKET .

    SEMICOLON       reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    PLUS            reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    MINUS           reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    BY              reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    DIVISION        reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    R_PAR           reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    R_BRACKET       reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)
    COMMA           reduce using rule 29 (expression -> L_BRACKET expressionList R_BRACKET .)


state 60

    (18) expressionList -> expressionList COMMA . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 66
    listArray                      shift and go to state 25

state 61

    (11) declaration -> CONST ID COLON type EQUAL . expression SEMICOLON
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression BY expression
    (23) expression -> . expression DIVISION expression
    (24) expression -> . L_PAR expression R_PAR
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . FLOAT
    (28) expression -> . listArray
    (29) expression -> . L_BRACKET expressionList R_BRACKET
    (30) listArray -> . listArray L_BRACKET expression R_BRACKET
    (31) listArray -> . listArray DOT ID
    (32) listArray -> . ID

    L_PAR           shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23
    FLOAT           shift and go to state 24
    L_BRACKET       shift and go to state 26
    ID              shift and go to state 19

    expression                     shift and go to state 67
    listArray                      shift and go to state 25

state 62

    (12) declaration -> CONST ID EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 12 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 12 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    CONST           reduce using rule 12 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 12 (declaration -> CONST ID EQUAL expression SEMICOLON .)
    $end            reduce using rule 12 (declaration -> CONST ID EQUAL expression SEMICOLON .)


state 63

    (7) print -> CONSOLE DOT LOG L_PAR expressionList R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 68


state 64

    (8) declaration -> VAR ID COLON type EQUAL expression . SEMICOLON
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 69
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 65

    (30) listArray -> listArray L_BRACKET expression R_BRACKET .

    L_BRACKET       reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    DOT             reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    BY              reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    DIVISION        reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    R_PAR           reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 30 (listArray -> listArray L_BRACKET expression R_BRACKET .)


state 66

    (18) expressionList -> expressionList COMMA expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    R_BRACKET       reduce using rule 18 (expressionList -> expressionList COMMA expression .)
    COMMA           reduce using rule 18 (expressionList -> expressionList COMMA expression .)
    R_PAR           reduce using rule 18 (expressionList -> expressionList COMMA expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 67

    (11) declaration -> CONST ID COLON type EQUAL expression . SEMICOLON
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . BY expression
    (23) expression -> expression . DIVISION expression

    SEMICOLON       shift and go to state 70
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    BY              shift and go to state 39
    DIVISION        shift and go to state 40


state 68

    (7) print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .

    CONSOLE         reduce using rule 7 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    VAR             reduce using rule 7 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    CONST           reduce using rule 7 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    ID              reduce using rule 7 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)
    $end            reduce using rule 7 (print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON .)


state 69

    (8) declaration -> VAR ID COLON type EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 8 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 8 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 8 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 8 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 8 (declaration -> VAR ID COLON type EQUAL expression SEMICOLON .)


state 70

    (11) declaration -> CONST ID COLON type EQUAL expression SEMICOLON .

    CONSOLE         reduce using rule 11 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 11 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    CONST           reduce using rule 11 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 11 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)
    $end            reduce using rule 11 (declaration -> CONST ID COLON type EQUAL expression SEMICOLON .)

