
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftBYDIVISIONleftGREATERLESSleftGREATER_ELESS_EleftANDleftORleftADD_ASSIGNSUB_ASSIGNADD_ASSIGN AND BOOLEAN BREAK BY CHAR COLON COMMA CONSOLE CONST CONTINUE DECIMAL DIF DIVISION DOT EQEQUAL EQUAL FLOAT GREATER GREATER_E ID IF INT LESS LESS_E LOG L_BRACKET L_KEY L_PAR MINUS MODULO NEGATE NUMBER OR PLUS RETURN R_BRACKET R_KEY R_PAR SEMICOLON STRING SUB_ASSIGN VAR WHILEs : blockblock : block instruction\n            | instructioninstruction : print\n                | declaration\n                | assignmentprint : CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLONdeclaration : VAR ID COLON type EQUAL expression SEMICOLON\n                    | VAR ID EQUAL expression SEMICOLON\n                    declaration : VAR ID COLON type SEMICOLONdeclaration : CONST ID COLON type EQUAL expression SEMICOLON\n                    | CONST ID EQUAL expression SEMICOLON\n                    assignment : ID EQUAL expression SEMICOLON\n                | ID ADD_ASSIGN expression SEMICOLON\n                | ID SUB_ASSIGN expression SEMICOLONtype : NUMBER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | CHARexpressionList : expressionList COMMA expression\n                    | expressionexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression BY expressionexpression : expression DIVISION expressionexpression : expression MODULO expressionexpression : expression EQEQUAL expressionexpression : expression DIF expressionexpression : expression GREATER expressionexpression : expression GREATER_E expressionexpression : expression LESS expressionexpression : expression LESS_E expressionexpression : expression AND expressionexpression : expression OR expressionexpression : NEGATE expressionexpression : L_PAR expression R_PARexpression : NUMBER\n                | STRING\n                | FLOAT\n                | CHAR\n                | BOOLEAN\n                | listArrayexpression : L_BRACKET expressionList R_BRACKETlistArray : listArray L_BRACKET expression R_BRACKET\n                | listArray DOT ID\n                | ID'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,11,44,64,65,70,71,91,97,98,99,],[7,7,-3,-4,-5,-6,-2,-13,-14,-15,-10,-9,-12,-7,-8,-11,]),'VAR':([0,2,3,4,5,6,11,44,64,65,70,71,91,97,98,99,],[8,8,-3,-4,-5,-6,-2,-13,-14,-15,-10,-9,-12,-7,-8,-11,]),'CONST':([0,2,3,4,5,6,11,44,64,65,70,71,91,97,98,99,],[10,10,-3,-4,-5,-6,-2,-13,-14,-15,-10,-9,-12,-7,-8,-11,]),'ID':([0,2,3,4,5,6,8,10,11,14,15,16,20,23,24,31,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,64,65,69,70,71,89,90,91,97,98,99,],[9,9,-3,-4,-5,-6,13,17,-2,21,21,21,21,21,21,21,21,21,-13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,87,-14,-15,21,-10,-9,21,21,-12,-7,-8,-11,]),'$end':([1,2,3,4,5,6,11,44,64,65,70,71,91,97,98,99,],[0,-1,-3,-4,-5,-6,-2,-13,-14,-15,-10,-9,-12,-7,-8,-11,]),'DOT':([7,21,30,87,94,],[12,-47,61,-46,-45,]),'EQUAL':([9,13,17,37,38,39,40,41,42,66,],[14,20,35,69,-16,-17,-18,-19,-20,90,]),'ADD_ASSIGN':([9,],[15,]),'SUB_ASSIGN':([9,],[16,]),'LOG':([12,],[18,]),'COLON':([13,17,],[19,34,]),'NEGATE':([14,15,16,20,23,24,31,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'L_PAR':([14,15,16,18,20,23,24,31,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[24,24,24,36,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NUMBER':([14,15,16,19,20,23,24,31,34,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[25,25,25,38,25,25,25,25,38,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING':([14,15,16,19,20,23,24,31,34,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[26,26,26,40,26,26,26,26,40,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FLOAT':([14,15,16,19,20,23,24,31,34,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[27,27,27,39,27,27,27,27,39,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'CHAR':([14,15,16,19,20,23,24,31,34,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[28,28,28,42,28,28,28,28,42,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'BOOLEAN':([14,15,16,19,20,23,24,31,34,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[29,29,29,41,29,29,29,29,41,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'L_BRACKET':([14,15,16,20,21,23,24,30,31,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,87,89,90,94,],[31,31,31,31,-47,31,31,60,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-46,31,31,-45,]),'SEMICOLON':([21,22,25,26,27,28,29,30,32,33,37,38,39,40,41,42,43,58,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,92,93,94,96,],[-47,44,-38,-39,-40,-41,-42,-43,64,65,70,-16,-17,-18,-19,-20,71,-36,91,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,-46,-44,97,98,-45,99,]),'PLUS':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,45,-38,-39,-40,-41,-42,-43,45,45,45,45,45,45,45,-23,-24,-25,-26,45,45,45,-30,-31,-32,-33,-34,-35,-37,45,-46,-44,45,-45,45,45,]),'MINUS':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,46,-38,-39,-40,-41,-42,-43,46,46,46,46,46,46,46,-23,-24,-25,-26,46,46,46,-30,-31,-32,-33,-34,-35,-37,46,-46,-44,46,-45,46,46,]),'BY':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,47,-38,-39,-40,-41,-42,-43,47,47,47,47,47,47,47,47,47,-25,-26,47,47,47,-30,-31,-32,-33,-34,-35,-37,47,-46,-44,47,-45,47,47,]),'DIVISION':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,48,-38,-39,-40,-41,-42,-43,48,48,48,48,48,48,48,48,48,-25,-26,48,48,48,-30,-31,-32,-33,-34,-35,-37,48,-46,-44,48,-45,48,48,]),'MODULO':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,49,-38,-39,-40,-41,-42,-43,49,49,49,49,49,49,49,-23,-24,-25,-26,49,49,49,-30,-31,-32,-33,-34,-35,-37,49,-46,-44,49,-45,49,49,]),'EQEQUAL':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,50,-38,-39,-40,-41,-42,-43,50,50,50,50,50,50,50,-23,-24,-25,-26,50,50,50,-30,-31,-32,-33,-34,-35,-37,50,-46,-44,50,-45,50,50,]),'DIF':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,51,-38,-39,-40,-41,-42,-43,51,51,51,51,51,51,51,-23,-24,-25,-26,51,51,51,-30,-31,-32,-33,-34,-35,-37,51,-46,-44,51,-45,51,51,]),'GREATER':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,52,-38,-39,-40,-41,-42,-43,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-30,-31,-32,-33,-34,-35,-37,52,-46,-44,52,-45,52,52,]),'GREATER_E':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,53,-38,-39,-40,-41,-42,-43,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-31,53,-33,-34,-35,-37,53,-46,-44,53,-45,53,53,]),'LESS':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,54,-38,-39,-40,-41,-42,-43,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-30,-31,-32,-33,-34,-35,-37,54,-46,-44,54,-45,54,54,]),'LESS_E':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,55,-38,-39,-40,-41,-42,-43,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-31,55,-33,-34,-35,-37,55,-46,-44,55,-45,55,55,]),'AND':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,56,-38,-39,-40,-41,-42,-43,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-34,-35,-37,56,-46,-44,56,-45,56,56,]),'OR':([21,22,25,26,27,28,29,30,32,33,43,58,59,63,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,95,96,],[-47,57,-38,-39,-40,-41,-42,-43,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-35,-37,57,-46,-44,57,-45,57,57,]),'R_PAR':([21,25,26,27,28,29,30,58,59,63,68,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,],[-47,-38,-39,-40,-41,-42,-43,-36,85,-22,92,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,-46,-44,-45,-21,]),'R_BRACKET':([21,25,26,27,28,29,30,58,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,94,95,],[-47,-38,-39,-40,-41,-42,-43,-36,88,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,94,-46,-44,-45,-21,]),'COMMA':([21,25,26,27,28,29,30,58,62,63,68,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,],[-47,-38,-39,-40,-41,-42,-43,-36,89,-22,89,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,-46,-44,-45,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,],[1,]),'block':([0,],[2,]),'instruction':([0,2,],[3,11,]),'print':([0,2,],[4,4,]),'declaration':([0,2,],[5,5,]),'assignment':([0,2,],[6,6,]),'expression':([14,15,16,20,23,24,31,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[22,32,33,43,58,59,63,67,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,93,95,96,]),'listArray':([14,15,16,20,23,24,31,35,36,45,46,47,48,49,50,51,52,53,54,55,56,57,60,69,89,90,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'type':([19,34,],[37,66,]),'expressionList':([31,36,],[62,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> block','s',1,'p_start','parser.py',213),
  ('block -> block instruction','block',2,'p_instruction_block','parser.py',218),
  ('block -> instruction','block',1,'p_instruction_block','parser.py',219),
  ('instruction -> print','instruction',1,'p_instruction_list','parser.py',228),
  ('instruction -> declaration','instruction',1,'p_instruction_list','parser.py',229),
  ('instruction -> assignment','instruction',1,'p_instruction_list','parser.py',230),
  ('print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON','print',7,'p_instruction_console','parser.py',235),
  ('declaration -> VAR ID COLON type EQUAL expression SEMICOLON','declaration',7,'p_instruction_declaration','parser.py',241),
  ('declaration -> VAR ID EQUAL expression SEMICOLON','declaration',5,'p_instruction_declaration','parser.py',242),
  ('declaration -> VAR ID COLON type SEMICOLON','declaration',5,'p_instruction_declaration_type','parser.py',253),
  ('declaration -> CONST ID COLON type EQUAL expression SEMICOLON','declaration',7,'p_instruction_declare_constants','parser.py',259),
  ('declaration -> CONST ID EQUAL expression SEMICOLON','declaration',5,'p_instruction_declare_constants','parser.py',260),
  ('assignment -> ID EQUAL expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',271),
  ('assignment -> ID ADD_ASSIGN expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',272),
  ('assignment -> ID SUB_ASSIGN expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',273),
  ('type -> NUMBER','type',1,'p_type_production','parser.py',283),
  ('type -> FLOAT','type',1,'p_type_production','parser.py',284),
  ('type -> STRING','type',1,'p_type_production','parser.py',285),
  ('type -> BOOLEAN','type',1,'p_type_production','parser.py',286),
  ('type -> CHAR','type',1,'p_type_production','parser.py',287),
  ('expressionList -> expressionList COMMA expression','expressionList',3,'p_expression_list','parser.py',305),
  ('expressionList -> expression','expressionList',1,'p_expression_list','parser.py',306),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','parser.py',316),
  ('expression -> expression MINUS expression','expression',3,'p_expression_sub','parser.py',322),
  ('expression -> expression BY expression','expression',3,'p_expression_mult','parser.py',328),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_div','parser.py',334),
  ('expression -> expression MODULO expression','expression',3,'p_expression_mod','parser.py',340),
  ('expression -> expression EQEQUAL expression','expression',3,'p_expression_equal','parser.py',346),
  ('expression -> expression DIF expression','expression',3,'p_expression_different','parser.py',358),
  ('expression -> expression GREATER expression','expression',3,'p_expression_greater','parser.py',364),
  ('expression -> expression GREATER_E expression','expression',3,'p_expression_greater_equal','parser.py',370),
  ('expression -> expression LESS expression','expression',3,'p_expression_less','parser.py',376),
  ('expression -> expression LESS_E expression','expression',3,'p_expression_less_equal','parser.py',382),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',388),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',394),
  ('expression -> NEGATE expression','expression',2,'p_expression_negate','parser.py',400),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression_group','parser.py',406),
  ('expression -> NUMBER','expression',1,'p_expression_primitive','parser.py',411),
  ('expression -> STRING','expression',1,'p_expression_primitive','parser.py',412),
  ('expression -> FLOAT','expression',1,'p_expression_primitive','parser.py',413),
  ('expression -> CHAR','expression',1,'p_expression_primitive','parser.py',414),
  ('expression -> BOOLEAN','expression',1,'p_expression_primitive','parser.py',415),
  ('expression -> listArray','expression',1,'p_expression_primitive','parser.py',416),
  ('expression -> L_BRACKET expressionList R_BRACKET','expression',3,'p_expression_array_primitive','parser.py',421),
  ('listArray -> listArray L_BRACKET expression R_BRACKET','listArray',4,'p_expression_list_array','parser.py',427),
  ('listArray -> listArray DOT ID','listArray',3,'p_expression_list_array','parser.py',428),
  ('listArray -> ID','listArray',1,'p_expression_list_array','parser.py',429),
]
