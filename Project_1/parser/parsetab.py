
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftBYDIVISIONBOOL BY COLON COMMA CONSOLE DECIMAL DIVISION DOT EQUAL FLOAT ID INT LOG L_BRACKET L_PAR MINUS NUMBER PLUS R_BRACKET R_PAR SEMICOLON STRING VARinstructions : instructions instruction\n                    | instructioninstruction : CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLONinstruction : VAR ID COLON type EQUAL expression SEMICOLONtype : NUMBER\n            | FLOAT\n            | STRING\n            | BOOLexpressionList : expressionList COMMA expression\n                    | expressionexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression BY expressionexpression : expression DIVISION expressionexpression : L_PAR expression R_PARexpression : NUMBER\n                | STRING\n                | listArraylistArray : listArray DOT ID\n                | listArray listAccessArray\n                | IDlistAccessArray : listAccessArray L_BRACKET expression R_BRACKET\n                    | L_BRACKET expression R_BRACKET'
    
_lr_action_items = {'CONSOLE':([0,1,2,5,36,45,],[3,3,-2,-1,-3,-4,]),'VAR':([0,1,2,5,36,45,],[4,4,-2,-1,-3,-4,]),'$end':([1,2,5,36,45,],[0,-2,-1,-3,-4,]),'DOT':([3,21,22,32,42,47,48,],[6,31,-21,-20,-19,-23,-22,]),'ID':([4,10,16,23,26,27,28,29,30,31,33,43,],[7,22,22,22,22,22,22,22,22,42,22,22,]),'LOG':([6,],[8,]),'COLON':([7,],[9,]),'L_PAR':([8,10,16,23,26,27,28,29,30,33,43,],[10,16,16,16,16,16,16,16,16,16,16,]),'NUMBER':([9,10,16,23,26,27,28,29,30,33,43,],[12,19,19,19,19,19,19,19,19,19,19,]),'FLOAT':([9,],[13,]),'STRING':([9,10,16,23,26,27,28,29,30,33,43,],[14,20,20,20,20,20,20,20,20,20,20,]),'BOOL':([9,],[15,]),'EQUAL':([11,12,13,14,15,],[23,-5,-6,-7,-8,]),'R_PAR':([17,18,19,20,21,22,24,32,35,37,38,39,40,41,42,47,48,],[25,-10,-16,-17,-18,-21,35,-20,-15,-9,-11,-12,-13,-14,-19,-23,-22,]),'COMMA':([17,18,19,20,21,22,32,35,37,38,39,40,41,42,47,48,],[26,-10,-16,-17,-18,-21,-20,-15,-9,-11,-12,-13,-14,-19,-23,-22,]),'PLUS':([18,19,20,21,22,24,32,34,35,37,38,39,40,41,42,44,46,47,48,],[27,-16,-17,-18,-21,27,-20,27,-15,27,-11,-12,-13,-14,-19,27,27,-23,-22,]),'MINUS':([18,19,20,21,22,24,32,34,35,37,38,39,40,41,42,44,46,47,48,],[28,-16,-17,-18,-21,28,-20,28,-15,28,-11,-12,-13,-14,-19,28,28,-23,-22,]),'BY':([18,19,20,21,22,24,32,34,35,37,38,39,40,41,42,44,46,47,48,],[29,-16,-17,-18,-21,29,-20,29,-15,29,29,29,-13,-14,-19,29,29,-23,-22,]),'DIVISION':([18,19,20,21,22,24,32,34,35,37,38,39,40,41,42,44,46,47,48,],[30,-16,-17,-18,-21,30,-20,30,-15,30,30,30,-13,-14,-19,30,30,-23,-22,]),'SEMICOLON':([19,20,21,22,25,32,34,35,38,39,40,41,42,47,48,],[-16,-17,-18,-21,36,-20,45,-15,-11,-12,-13,-14,-19,-23,-22,]),'R_BRACKET':([19,20,21,22,32,35,38,39,40,41,42,44,46,47,48,],[-16,-17,-18,-21,-20,-15,-11,-12,-13,-14,-19,47,48,-23,-22,]),'L_BRACKET':([21,22,32,42,47,48,],[33,-21,43,-19,-23,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instructions':([0,],[1,]),'instruction':([0,1,],[2,5,]),'type':([9,],[11,]),'expressionList':([10,],[17,]),'expression':([10,16,23,26,27,28,29,30,33,43,],[18,24,34,37,38,39,40,41,44,46,]),'listArray':([10,16,23,26,27,28,29,30,33,43,],[21,21,21,21,21,21,21,21,21,21,]),'listAccessArray':([21,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instructions","S'",1,None,None,None),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_list','parser.py',137),
  ('instructions -> instruction','instructions',1,'p_instructions_list','parser.py',138),
  ('instruction -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON','instruction',7,'p_instruction_console','parser.py',147),
  ('instruction -> VAR ID COLON type EQUAL expression SEMICOLON','instruction',7,'p_instruction_declaration','parser.py',153),
  ('type -> NUMBER','type',1,'p_type_production','parser.py',159),
  ('type -> FLOAT','type',1,'p_type_production','parser.py',160),
  ('type -> STRING','type',1,'p_type_production','parser.py',161),
  ('type -> BOOL','type',1,'p_type_production','parser.py',162),
  ('expressionList -> expressionList COMMA expression','expressionList',3,'p_expression_list','parser.py',178),
  ('expressionList -> expression','expressionList',1,'p_expression_list','parser.py',179),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','parser.py',189),
  ('expression -> expression MINUS expression','expression',3,'p_expression_sub','parser.py',195),
  ('expression -> expression BY expression','expression',3,'p_expression_mult','parser.py',201),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_div','parser.py',207),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression_group','parser.py',213),
  ('expression -> NUMBER','expression',1,'p_expression_primitive','parser.py',218),
  ('expression -> STRING','expression',1,'p_expression_primitive','parser.py',219),
  ('expression -> listArray','expression',1,'p_expression_primitive','parser.py',220),
  ('listArray -> listArray DOT ID','listArray',3,'p_expression_list_array','parser.py',225),
  ('listArray -> listArray listAccessArray','listArray',2,'p_expression_list_array','parser.py',226),
  ('listArray -> ID','listArray',1,'p_expression_list_array','parser.py',227),
  ('listAccessArray -> listAccessArray L_BRACKET expression R_BRACKET','listAccessArray',4,'p_expression_list_access_array','parser.py',238),
  ('listAccessArray -> L_BRACKET expression R_BRACKET','listAccessArray',3,'p_expression_list_access_array','parser.py',239),
]
