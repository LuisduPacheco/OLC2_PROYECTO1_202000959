
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftBYDIVISIONleftGREATERLESSleftGREATER_ELESS_EleftANDleftORleftADD_ASSIGNSUB_ASSIGNADD_ASSIGN AND BOOLEAN BREAK BY CHAR COLON COMMA CONSOLE CONST CONTINUE DECIMAL DIF DIVISION DOT ELSE EQEQUAL EQUAL FLOAT GREATER GREATER_E ID IF INT LESS LESS_E LOG L_BRACKET L_KEY L_PAR MINUS MODULO NEGATE NUMBER OR PLUS RETURN R_BRACKET R_KEY R_PAR SEMICOLON STRING SUB_ASSIGN VAR WHILEs : blockblock : block instruction\n            | instructioninstruction : print\n                | if_instruction\n                | declaration\n                | assignmentprint : CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLONif_instruction : IF L_PAR expression R_PAR L_KEY block R_KEY\n                      | if_instruction else_if_instructionelse_if_instruction : ELSE IF L_PAR expression R_PAR L_KEY block R_KEYdeclaration : VAR ID COLON type EQUAL expression SEMICOLON\n                    | VAR ID EQUAL expression SEMICOLON\n                    declaration : VAR ID COLON type SEMICOLONdeclaration : CONST ID COLON type EQUAL expression SEMICOLON\n                    | CONST ID EQUAL expression SEMICOLON\n                    assignment : ID EQUAL expression SEMICOLON\n                | ID ADD_ASSIGN expression SEMICOLON\n                | ID SUB_ASSIGN expression SEMICOLONtype : NUMBER\n            | FLOAT\n            | STRING\n            | BOOLEAN\n            | CHARexpressionList : expressionList COMMA expression\n                    | expressionexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression BY expressionexpression : expression DIVISION expressionexpression : expression MODULO expressionexpression : expression EQEQUAL expressionexpression : expression DIF expressionexpression : expression GREATER expressionexpression : expression GREATER_E expressionexpression : expression LESS expressionexpression : expression LESS_E expressionexpression : expression AND expressionexpression : expression OR expressionexpression : NEGATE expressionexpression : L_PAR expression R_PARexpression : NUMBER\n                | STRING\n                | FLOAT\n                | CHAR\n                | BOOLEAN\n                | listArrayexpression : L_BRACKET expressionList R_BRACKETlistArray : listArray L_BRACKET expression R_BRACKET\n                | listArray DOT ID\n                | ID'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,7,13,14,72,73,74,80,99,100,102,105,110,111,112,113,114,115,116,],[8,8,-3,-4,-5,-6,-7,-2,-10,-17,-18,-19,8,-14,-13,-16,8,8,-8,-9,-12,-15,8,-11,]),'IF':([0,2,3,4,5,6,7,13,14,15,72,73,74,80,99,100,102,105,110,111,112,113,114,115,116,],[9,9,-3,-4,-5,-6,-7,-2,-10,23,-17,-18,-19,9,-14,-13,-16,9,9,-8,-9,-12,-15,9,-11,]),'VAR':([0,2,3,4,5,6,7,13,14,72,73,74,80,99,100,102,105,110,111,112,113,114,115,116,],[10,10,-3,-4,-5,-6,-7,-2,-10,-17,-18,-19,10,-14,-13,-16,10,10,-8,-9,-12,-15,10,-11,]),'CONST':([0,2,3,4,5,6,7,13,14,72,73,74,80,99,100,102,105,110,111,112,113,114,115,116,],[12,12,-3,-4,-5,-6,-7,-2,-10,-17,-18,-19,12,-14,-13,-16,12,12,-8,-9,-12,-15,12,-11,]),'ID':([0,2,3,4,5,6,7,10,12,13,14,17,19,20,21,25,27,34,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,72,73,74,80,97,98,99,100,101,102,105,110,111,112,113,114,115,116,],[11,11,-3,-4,-5,-6,-7,18,22,-2,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,95,-17,-18,-19,11,35,35,-14,-13,35,-16,11,11,-8,-9,-12,-15,11,-11,]),'$end':([1,2,3,4,5,6,7,13,14,72,73,74,99,100,102,111,112,113,114,116,],[0,-1,-3,-4,-5,-6,-7,-2,-10,-17,-18,-19,-14,-13,-16,-8,-9,-12,-15,-11,]),'R_KEY':([3,4,5,6,7,13,14,72,73,74,99,100,102,105,111,112,113,114,115,116,],[-3,-4,-5,-6,-7,-2,-10,-17,-18,-19,-14,-13,-16,112,-8,-9,-12,-15,116,-11,]),'ELSE':([5,14,112,116,],[15,-10,-9,-11,]),'DOT':([8,33,35,95,106,],[16,62,-51,-50,-49,]),'L_PAR':([9,17,19,20,21,23,24,25,27,34,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[17,25,25,25,25,43,44,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'EQUAL':([11,18,22,65,66,67,68,69,70,75,],[19,37,42,98,-20,-21,-22,-23,-24,101,]),'ADD_ASSIGN':([11,],[20,]),'SUB_ASSIGN':([11,],[21,]),'LOG':([16,],[24,]),'NEGATE':([17,19,20,21,25,27,34,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NUMBER':([17,19,20,21,25,27,34,36,37,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[28,28,28,28,28,28,28,66,28,66,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'STRING':([17,19,20,21,25,27,34,36,37,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[29,29,29,29,29,29,29,68,29,68,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'FLOAT':([17,19,20,21,25,27,34,36,37,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[30,30,30,30,30,30,30,67,30,67,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CHAR':([17,19,20,21,25,27,34,36,37,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[31,31,31,31,31,31,31,70,31,70,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOLEAN':([17,19,20,21,25,27,34,36,37,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[32,32,32,32,32,32,32,69,32,69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'L_BRACKET':([17,19,20,21,25,27,33,34,35,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,95,97,98,101,106,],[34,34,34,34,34,34,61,34,-51,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-50,34,34,34,-49,]),'COLON':([18,22,],[36,41,]),'R_PAR':([26,28,29,30,31,32,33,35,45,60,64,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,106,107,],[46,-42,-43,-44,-45,-46,-47,-51,79,-40,-26,103,104,-41,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-50,-48,-49,-25,]),'PLUS':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[47,-42,-43,-44,-45,-46,-47,-51,47,47,47,47,47,47,47,47,47,-41,-27,-28,-29,-30,47,47,47,-34,-35,-36,-37,-38,-39,47,-50,-48,-49,47,47,47,]),'MINUS':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[48,-42,-43,-44,-45,-46,-47,-51,48,48,48,48,48,48,48,48,48,-41,-27,-28,-29,-30,48,48,48,-34,-35,-36,-37,-38,-39,48,-50,-48,-49,48,48,48,]),'BY':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[49,-42,-43,-44,-45,-46,-47,-51,49,49,49,49,49,49,49,49,49,-41,49,49,-29,-30,49,49,49,-34,-35,-36,-37,-38,-39,49,-50,-48,-49,49,49,49,]),'DIVISION':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[50,-42,-43,-44,-45,-46,-47,-51,50,50,50,50,50,50,50,50,50,-41,50,50,-29,-30,50,50,50,-34,-35,-36,-37,-38,-39,50,-50,-48,-49,50,50,50,]),'MODULO':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[51,-42,-43,-44,-45,-46,-47,-51,51,51,51,51,51,51,51,51,51,-41,-27,-28,-29,-30,51,51,51,-34,-35,-36,-37,-38,-39,51,-50,-48,-49,51,51,51,]),'EQEQUAL':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[52,-42,-43,-44,-45,-46,-47,-51,52,52,52,52,52,52,52,52,52,-41,-27,-28,-29,-30,52,52,52,-34,-35,-36,-37,-38,-39,52,-50,-48,-49,52,52,52,]),'DIF':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[53,-42,-43,-44,-45,-46,-47,-51,53,53,53,53,53,53,53,53,53,-41,-27,-28,-29,-30,53,53,53,-34,-35,-36,-37,-38,-39,53,-50,-48,-49,53,53,53,]),'GREATER':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[54,-42,-43,-44,-45,-46,-47,-51,54,54,54,54,54,54,54,54,54,-41,54,54,54,54,54,54,54,-34,-35,-36,-37,-38,-39,54,-50,-48,-49,54,54,54,]),'GREATER_E':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[55,-42,-43,-44,-45,-46,-47,-51,55,55,55,55,55,55,55,55,55,-41,55,55,55,55,55,55,55,55,-35,55,-37,-38,-39,55,-50,-48,-49,55,55,55,]),'LESS':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[56,-42,-43,-44,-45,-46,-47,-51,56,56,56,56,56,56,56,56,56,-41,56,56,56,56,56,56,56,-34,-35,-36,-37,-38,-39,56,-50,-48,-49,56,56,56,]),'LESS_E':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[57,-42,-43,-44,-45,-46,-47,-51,57,57,57,57,57,57,57,57,57,-41,57,57,57,57,57,57,57,57,-35,57,-37,-38,-39,57,-50,-48,-49,57,57,57,]),'AND':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[58,-42,-43,-44,-45,-46,-47,-51,58,58,58,58,58,58,58,58,58,-41,58,58,58,58,58,58,58,58,58,58,58,-38,-39,58,-50,-48,-49,58,58,58,]),'OR':([26,28,29,30,31,32,33,35,38,39,40,45,60,64,71,76,77,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,108,109,],[59,-42,-43,-44,-45,-46,-47,-51,59,59,59,59,59,59,59,59,59,-41,59,59,59,59,59,59,59,59,59,59,59,59,-39,59,-50,-48,-49,59,59,59,]),'SEMICOLON':([28,29,30,31,32,33,35,38,39,40,60,65,66,67,68,69,70,71,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,104,106,108,109,],[-42,-43,-44,-45,-46,-47,-51,72,73,74,-40,99,-20,-21,-22,-23,-24,100,102,-41,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-50,-48,111,-49,113,114,]),'R_BRACKET':([28,29,30,31,32,33,35,60,63,64,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,106,107,],[-42,-43,-44,-45,-46,-47,-51,-40,96,-26,-41,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,106,-50,-48,-49,-25,]),'COMMA':([28,29,30,31,32,33,35,60,63,64,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,106,107,],[-42,-43,-44,-45,-46,-47,-51,-40,97,-26,97,-41,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-50,-48,-49,-25,]),'L_KEY':([46,103,],[80,110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,],[1,]),'block':([0,80,110,],[2,105,115,]),'instruction':([0,2,80,105,110,115,],[3,13,3,13,3,13,]),'print':([0,2,80,105,110,115,],[4,4,4,4,4,4,]),'if_instruction':([0,2,80,105,110,115,],[5,5,5,5,5,5,]),'declaration':([0,2,80,105,110,115,],[6,6,6,6,6,6,]),'assignment':([0,2,80,105,110,115,],[7,7,7,7,7,7,]),'else_if_instruction':([5,],[14,]),'expression':([17,19,20,21,25,27,34,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[26,38,39,40,45,60,64,71,76,77,64,81,82,83,84,85,86,87,88,89,90,91,92,93,94,107,108,109,]),'listArray':([17,19,20,21,25,27,34,37,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,61,97,98,101,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'expressionList':([34,44,],[63,78,]),'type':([36,41,],[65,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> block','s',1,'p_start','parser.py',215),
  ('block -> block instruction','block',2,'p_instruction_block','parser.py',220),
  ('block -> instruction','block',1,'p_instruction_block','parser.py',221),
  ('instruction -> print','instruction',1,'p_instruction_list','parser.py',230),
  ('instruction -> if_instruction','instruction',1,'p_instruction_list','parser.py',231),
  ('instruction -> declaration','instruction',1,'p_instruction_list','parser.py',232),
  ('instruction -> assignment','instruction',1,'p_instruction_list','parser.py',233),
  ('print -> CONSOLE DOT LOG L_PAR expressionList R_PAR SEMICOLON','print',7,'p_instruction_console','parser.py',238),
  ('if_instruction -> IF L_PAR expression R_PAR L_KEY block R_KEY','if_instruction',7,'p_instruction_if','parser.py',244),
  ('if_instruction -> if_instruction else_if_instruction','if_instruction',2,'p_instruction_if','parser.py',245),
  ('else_if_instruction -> ELSE IF L_PAR expression R_PAR L_KEY block R_KEY','else_if_instruction',8,'p_else_if_instruction','parser.py',255),
  ('declaration -> VAR ID COLON type EQUAL expression SEMICOLON','declaration',7,'p_instruction_declaration','parser.py',261),
  ('declaration -> VAR ID EQUAL expression SEMICOLON','declaration',5,'p_instruction_declaration','parser.py',262),
  ('declaration -> VAR ID COLON type SEMICOLON','declaration',5,'p_instruction_declaration_type','parser.py',273),
  ('declaration -> CONST ID COLON type EQUAL expression SEMICOLON','declaration',7,'p_instruction_declare_constants','parser.py',279),
  ('declaration -> CONST ID EQUAL expression SEMICOLON','declaration',5,'p_instruction_declare_constants','parser.py',280),
  ('assignment -> ID EQUAL expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',291),
  ('assignment -> ID ADD_ASSIGN expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',292),
  ('assignment -> ID SUB_ASSIGN expression SEMICOLON','assignment',4,'p_instruction_assignment','parser.py',293),
  ('type -> NUMBER','type',1,'p_type_production','parser.py',303),
  ('type -> FLOAT','type',1,'p_type_production','parser.py',304),
  ('type -> STRING','type',1,'p_type_production','parser.py',305),
  ('type -> BOOLEAN','type',1,'p_type_production','parser.py',306),
  ('type -> CHAR','type',1,'p_type_production','parser.py',307),
  ('expressionList -> expressionList COMMA expression','expressionList',3,'p_expression_list','parser.py',325),
  ('expressionList -> expression','expressionList',1,'p_expression_list','parser.py',326),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','parser.py',336),
  ('expression -> expression MINUS expression','expression',3,'p_expression_sub','parser.py',342),
  ('expression -> expression BY expression','expression',3,'p_expression_mult','parser.py',348),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_div','parser.py',354),
  ('expression -> expression MODULO expression','expression',3,'p_expression_mod','parser.py',360),
  ('expression -> expression EQEQUAL expression','expression',3,'p_expression_equal','parser.py',366),
  ('expression -> expression DIF expression','expression',3,'p_expression_different','parser.py',378),
  ('expression -> expression GREATER expression','expression',3,'p_expression_greater','parser.py',384),
  ('expression -> expression GREATER_E expression','expression',3,'p_expression_greater_equal','parser.py',390),
  ('expression -> expression LESS expression','expression',3,'p_expression_less','parser.py',396),
  ('expression -> expression LESS_E expression','expression',3,'p_expression_less_equal','parser.py',402),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',408),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',414),
  ('expression -> NEGATE expression','expression',2,'p_expression_negate','parser.py',420),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression_group','parser.py',426),
  ('expression -> NUMBER','expression',1,'p_expression_primitive','parser.py',431),
  ('expression -> STRING','expression',1,'p_expression_primitive','parser.py',432),
  ('expression -> FLOAT','expression',1,'p_expression_primitive','parser.py',433),
  ('expression -> CHAR','expression',1,'p_expression_primitive','parser.py',434),
  ('expression -> BOOLEAN','expression',1,'p_expression_primitive','parser.py',435),
  ('expression -> listArray','expression',1,'p_expression_primitive','parser.py',436),
  ('expression -> L_BRACKET expressionList R_BRACKET','expression',3,'p_expression_array_primitive','parser.py',441),
  ('listArray -> listArray L_BRACKET expression R_BRACKET','listArray',4,'p_expression_list_array','parser.py',447),
  ('listArray -> listArray DOT ID','listArray',3,'p_expression_list_array','parser.py',448),
  ('listArray -> ID','listArray',1,'p_expression_list_array','parser.py',449),
]
